/*********************************************************************************************************
  Copyright: © 2015-2024 Ozan Nurettin Süel (Sicherheitsschmiede)                                        
  License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file.  
  Authors: Ozan Nurettin Süel (Sicherheitsschmiede)                                                      
**********************************************************************************************************/
module uim.collections.collection;

import uim.collections;

@safe:

/**
 * A collection is an immutable list of elements with a handful of functions to
 * iterate, group, transform and extract information from it.
 */
class DCollection : IteratorIterator : ICollection, Serializable {
    // use TCollection;

    // Constructor. You can provide an array or any traversable object
    this(Json[string] items) {
        if (items.isArray) {
            items = new DArrayIterator(items);
        }

        super(items);
    }

    /**
     * Returns a string representation of this object that can be used
     * to reconstruct it
     */
    string serialize() {
        return serialize(this.buffered());
    }

    // Returns an array for serializing this of this object.
    Json[string] __serialize() {
        return _buffered().toArray();
    }

    // Unserializes the passed string and rebuilds the Collection instance
    void unserialize(string serializedCollection) {
        __construct(unserialize(collection));
    }

    // Rebuilds the Collection instance.
    void __unserialize(Json[string] data) {
        __construct(data);
    }

    size_t count() {
        auto traversable = this.optimizeUnwrap();

        return traversable.isArray
            ? count(traversable)
            : iterator_count(traversable);
    }

    size_t countKeys() {
        return count(this.toArray());
    }

    // Returns an array that can be used to describe the internal state of this object.
    Json[string] __debugInfo() {
        size_t count;
        try {
            count = count();
        } catch (Exception e) {
            count = "An exception occurred while getting count";
        }

        return [
            "count": Json(count),
        ];
    }
}
