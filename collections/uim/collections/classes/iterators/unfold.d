module uim.collections.classes.iterators.unfold;

import uim.collections;

@safe:

/**
 * An iterator that can be used to generate nested iterators out of a collection
 * of items by applying an auto to each of the elements in this iterator.
 */
class DUnfoldIterator {  /* }: IteratorIterator, RecursiveIterator {
    /**
     * A auto that is passed each element in this iterator and
     * must return an array or Traversable object.
          */
    protected callable _unfolder;

    // A reference to the internal iterator this object is wrapping.
    protected ITraversable _innerIterator;

    /**
     * Creates the iterator that will generate child iterators from each of the
     * elements it was constructed with.
     */
    this(DTraversable valuesToIterate, callable unfolder) {
       _unfolder = unfolder;
        super(valuesToIterate);
       _innerIterator = innerIterator();
    }
    
    /**
     * Returns true as each of the elements in the array represent a
     * list of items
     */
    bool hasChildren() {
        return true;
    }
    
    /**
     * Returns an iterator containing the items generated by transforming
     * the current value with the callable function.
     */
    DRecursiveIterator getChildren() {
        auto current = current();
        auto key = key();
        auto unfolder = _unfolder;

        return new DNoChildrenIterator(unfolder(current, key, _innerIterator));
    } */
}
