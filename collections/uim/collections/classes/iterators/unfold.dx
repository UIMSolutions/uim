module uim.collections.iterators;

import uim.collections;

@safe:

/**
 * An iterator that can be used to generate nested iterators out of a collection
 * of items by applying an auto to each of the elements in this iterator.
 *
 * @internal
 * @see \UIM\Collection\Collection.unfold()
 * @template-implements \RecursiveIterator<mixed, mixed>
 * @template-extends \IteratorIterator<mixed, mixed, \Traversable<mixed, mixed>>
 */
class DUnfoldIterator : IteratorIterator, RecursiveIterator {
    /**
     * A auto that is passed each element in this iterator and
     * must return an array or Traversable object.
     *
          */
    protected callable  _unfolder;

    /**
     * A reference to the internal iterator this object is wrapping.
     */
    protected DTraversable _innerIterator;

    /**
     * Creates the iterator that will generate child iterators from each of the
     * elements it was constructed with.
     * Params:
     * \Traversable  someItems The list of values to iterate
     * @param callable unfolder A callable auto that will receive the
     * current item and key. It must return an array or Traversable object
     * out of which the nested iterators will be yielded.
     */
    this(Traversable  someItems, callable unfolder) {
       _unfolder = unfolder;
        super(someItems);
       _innerIterator = this.getInnerIterator();
    }
    
    /**
     * Returns true as each of the elements in the array represent a
     * list of items
     */
    bool hasChildren() {
        return true;
    }
    
    /**
     * Returns an iterator containing the items generated by transforming
     * the current value with the callable function.
     */
    DRecursiveIterator getChildren() {
        auto current = this.current();
        auto key = this.key();
        auto unfolder = _unfolder;

        return new DNoChildrenIterator(unfolder(current, key, _innerIterator));
    }
}
