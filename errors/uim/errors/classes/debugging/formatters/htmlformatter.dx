/*********************************************************************************************************
	Copyright: © 2015-2024 Ozan Nurettin Süel (Sicherheitsschmiede)                                        
	License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file.  
	Authors: Ozan Nurettin Süel (Sicherheitsschmiede)                                                      
**********************************************************************************************************/
module uim.errors.debugs;

@safe:
import uim.errors;


/**
 * A Debugger formatter for generating interactive styled HTML output.
 *
 * @internal
 */
class HtmlFormatter : IFormatter {
    protected static bool outputHeader = false;

    /**
     * Random id so that HTML ids are not shared between dump outputs.
     */
    protected string id;

    /**
     * Constructor.
     */
    this() {
        this.id = uniqid("", true);
    }

    /**
     * Check if the current environment is not a CLI context
     *
     * @return bool
     */
    static bool environmentMatches() {
        if (PHP_SAPI == "cli" || PHP_SAPI == "phpdbg") {
            return false;
        }

        return true;
    }


    string formatWrapper(string myContentss, array myLocation) {
        lineInfo = "";
        if (isset(myLocation["file"], myLocation["file"])) {
            lineInfo = sprintf(
                "<span><strong>%s</strong> (line <strong>%s</strong>)</span>",
                myLocation["file"],
                myLocation["line"]
            );
        }
        parts = [
            "<div class="cake-debug-output cake-debug" style="direction:ltr">",
            lineInfo,
            myContentss,
            "</div>",
        ];

        return implode("\n", parts);
    }

    /**
     * Generate the CSS and Javascript for dumps
     *
     * Only output once per process as we don"t need it more than once.
     */
    protected string dumpHeader() {
        ob_start();
        include __DIR__ . DIRECTORY_SEPARATOR ~ "dumpHeader.html";

        return ob_get_clean();
    }

    /**
     * Convert a tree of IERRNode objects into HTML
     *
     * @param uim.errors.debugs.IERRNode myNode The node tree to dump.
     */
    string dump(IERRNode myNode) {
        html = this.export(myNode, 0);
        head = "";
        if (!outputHeader) {
            outputHeader = true;
            head = this.dumpHeader();
        }

        return head ~ "<div class="cake-dbg">" ~ html ~ "</div>";
    }

    /**
     * Convert a tree of IERRNode objects into HTML
     *
     * @param uim.errors.debugs.IERRNode var The node tree to dump.
     * @param int indent The current indentation level.
     * @return string
     */
    protected string export(IERRNode var, int indent) {
        if (var instanceof ScalarNode) {
            switch (var.getType()) {
                case "bool":
                    return this.style("const", var.getValue() ? "true" : "false");
                case "null":
                    return this.style("const", "null");
                case "string":
                    return this.style("string", """ ~ (string)var.getValue() ~ """);
                case "int":
                case "float":
                    return this.style("visibility", "({var.getType()})") .
                        " " ~ this.style("number", "{var.getValue()}");
                default:
                    return "({var.getType()}) {var.getValue()}";
            }
        }
        if (var instanceof ArrayNode) {
            return this.exportArray(var, indent + 1);
        }
        if (var instanceof ClassNode || var instanceof ReferenceNode) {
            return this.exportObject(var, indent + 1);
        }
        if (var instanceof SpecialNode) {
            return this.style("special", var.getValue());
        }
        throw new DRuntimeException("Unknown node received " ~ get_class(var));
    }

    /**
     * Export an array type object
     *
     * @param uim.errors.debugs.ArrayNode var The array to export.
     * @param int indent The current indentation level.
     * @return string Exported array.
     */
    protected string exportArray(ArrayNode var, int indent) {
        open = "<span class="cake-dbg-array">" ~
            this.style("punct", "[") .
            "<samp class="cake-dbg-array-items">";
        vars = [];
        break = "\n" ~ str_repeat("  ", indent);
        endBreak = "\n" ~ str_repeat("  ", indent - 1);

        arrow = this.style("punct", ":");
        foreach (var.getChildren() as item) {
            val = item.getValue();
            vars ~= break ~ "<span class="cake-dbg-array-item">" ~
                this.export(item.getKey(), indent) . arrow . this.export(val, indent) .
                this.style("punct", ",") .
                "</span>";
        }

        close = "</samp>" ~
            endBreak .
            this.style("punct", "]") .
            "</span>";

        return open . implode("", vars) . close;
    }

    /**
     * Handles object to string conversion.
     *
     * @param uim.errors.debugs.ClassNode|uim.errors.debugs.ReferenceNode var Object to convert.
     * @param int indent The current indentation level.
     * @return string
     * @see uim.errors.Debugger::exportVar()
     */
    protected string exportObject(var, int indent) {
        objectId = "cake-db-object-{this.id}-{var.getId()}";
        out = sprintf(
            "<span class="cake-dbg-object" id='%s'>",
            objectId
        );
        break = "\n" ~ str_repeat("  ", indent);
        endBreak = "\n" ~ str_repeat("  ", indent - 1);

        if (var instanceof ReferenceNode) {
            link = sprintf(
                "<a class="cake-dbg-ref" href="#%s">id: %s</a>",
                objectId,
                var.getId()
            );

            return "<span class="cake-dbg-ref">" ~
                this.style("punct", "object(") .
                this.style("class", var.getValue()) .
                this.style("punct", ") ") .
                link .
                this.style("punct", " {}") .
                "</span>";
        }

        out ~= this.style("punct", "object(") .
            this.style("class", var.getValue()) .
            this.style("punct", ") id:") .
            this.style("number", (string)var.getId()) .
            this.style("punct", " {") .
            "<samp class="cake-dbg-object-props">";

        props = [];
        foreach (var.getChildren() as property) {
            arrow = this.style("punct", ":");
            visibility = property.getVisibility();
            myName = property.getName();
            if (visibility && visibility != "public") {
                props ~= break .
                    "<span class="cake-dbg-prop">" ~
                    this.style("visibility", visibility) .
                    " " ~
                    this.style("property", myName) .
                    arrow .
                    this.export(property.getValue(), indent) .
                "</span>";
            } else {
                props ~= break .
                    "<span class="cake-dbg-prop">" ~
                    this.style("property", myName) .
                    arrow .
                    this.export(property.getValue(), indent) .
                    "</span>";
            }
        }

        end = "</samp>" ~
            endBreak .
            this.style("punct", "}") .
            "</span>";

        if (count(props)) {
            return out . implode("", props) . end;
        }

        return out . end;
    }

    /**
     * Style text with HTML class names
     *
     * @param string style The style name to use.
     * @param string text The text to style.
     * @return string The styled output.
     */
    protected string style(string style, string text) {
        return sprintf(
            "<span class="cake-dbg-%s">%s</span>",
            style,
            htmlAttribEscape(text)
        );
    }
}
