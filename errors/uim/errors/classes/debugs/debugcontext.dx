module uim.errors\Debug;

import uim.errors;

@safe:

/**
 * DContext tracking for Debugger.exportVar()
 *
 * This class is used by Debugger to track element depth, and
 * prevent cyclic references from being traversed multiple times.
 *
 * @internal
 */
class DebugContext {
    private int maxDepth = 0;

    private int depth = 0;

    private SplObjectStorage<object, int> refs;

    /**
     * Constructor
     * Params:
     * int maxDepth The desired depth of dump output.
     */
    this(int maxDepth) {
        this.maxDepth = maxDepth;
        this.refs = new SplObjectStorage();
    }
    
    // Return a clone with increased depth.
    static auto withAddedDepth() {
        new = clone this;
        new.depth += 1;

        return new;
    }
    
    /**
     * Get the remaining depth levels
     */
    int remainingDepth() {
        return this.maxDepth - this.depth;
    }
    
    /**
     * Get the reference ID for an object.
     *
     * If this object does not exist in the reference storage,
     * it will be added and the id will be returned.
     * Params:
     * object object The object to get a reference for.
     */
    int getReferenceId(object object) {
        if (this.refs.contains(object)) {
            return this.refs[object];
        }
        refId = this.refs.count();
        this.refs.attach(object, refId);

        return refId;
    }
    
    /**
     * Check whether an object has been seen before.
     * Params:
     * object object The object to get a reference for.
     */
    bool hasReference(object object) {
        return this.refs.contains(object);
    }
}
