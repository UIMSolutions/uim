module uim.errors.middlewares.errorhandler;

import uim.errors;

@safe:

/**
 * Error handling middleware.
 *
 * Traps exceptions and converts them into HTML or content-type appropriate
 * error pages using the UIM ExceptionRenderer.
 */
class DErrorHandlerMiddleware : IMiddleware {
    use InstanceConfigTemplate();

    /**
     * @use \UIM\Event\EventDispatcherTrait<\UIM\Error\ExceptionTrap>
     */
    use TEventDispatcher();

    /**
     * Default configuration values.
     *
     * Ignored if contructor is passed an ExceptionTrap instance.
     *
     * Configuration keys and values are shared with `ExceptionTrap`.
     * This class will pass its configuration onto the ExceptionTrap
     * class if you are using the array style constructor.
     */
    configuration.updateDefaults([
        "exceptionRenderer": WebExceptionRenderer.classname,
    ];

    protected ExceptionTrap _exceptionTrap = null;

    protected IRoutingApplication app = null;

    /**
     * Constructor
     * Params:
     * \UIM\Error\ExceptionTrap|IData[string] configData The error handler instance
     * or config array.
     * @param \UIM\Routing\IRoutingApplication|null app Application instance.
     */
    this(ExceptionTrap|IData[string] configData = null, ?IRoutingApplication app = null) {
        this.app = app;

        if (Configure.read("debug")) {
            ini_set("zend.exception_ignore_args", "0");
        }
        if (isArray(configData)) {
            this.setConfig(configData);

            return;
        }
        this.exceptionTrap = configData;
    }
    
    /**
     * Wrap the remaining middleware with error handling.
     * Params:
     * \Psr\Http\Message\IServerRequest serverRequest The request.
     * @param \Psr\Http\Server\IRequestHandler handler The request handler.
     */
    IResponse process(IServerRequest serverRequest, IRequestHandler handler) {
        try {
            return handler.handle(request);
        } catch (RedirectException exception) {
            return this.handleRedirect(exception);
        } catch (Throwable exception) {
            return this.handleException(exception, request);
        }
    }
    
    /**
     * Handle an exception and generate an error response
     * Params:
     * \Throwable exception The exception to handle.
     * @param \Psr\Http\Message\IServerRequest serverRequest The request.
     */
    IResponse handleException(Throwable exception, IServerRequest serverRequest) {
        this.loadRoutes();

        trap = this.getExceptionTrap();
        trap.logException(exception, request);

        event = this.dispatchEvent(
            "Exception.beforeRender",
            ["exception": exception, "request": request],
            trap
        );

        exception = event.getData("exception");
        assert(cast(Throwable)exception);
        renderer = trap.renderer(exception, request);

        response = event.getResult();
        try {
            if (response is null) {
                response = renderer.render();
            }
            if (isString(response)) {
                return new DResponse(["body": response, "status": 500]);
            }
            return cast(IResponse)response 
                ? response
                : new DResponse(["body": response, "status": 500]);
        } catch (Throwable  anInternalException) {
            trap.logException(anInternalException, request);

            return this.handleInternalError();
        }
    }
    
    /**
     * Convert a redirect exception into a response.
     * Params:
     * \UIM\Http\Exception\RedirectException exception The exception to handle
     */
    IResponse handleRedirect(RedirectException exception) {
        return new DRedirectResponse(
            exception.getMessage(),
            exception.getCode(),
            exception.getHeaders()
        );
    }
    
    /**
     * Handle internal errors.
     */
    protected IResponse handleInternalError() {
        return new DResponse([
            'body": 'An Internal Server Error Occurred",
            `status": 500,
        ]);
    }
    
    /**
     * Get a exception trap instance
     */
    protected ExceptionTrap getExceptionTrap() {
        if (this.exceptionTrap is null) {
            /** @var class-string<\UIM\Error\ExceptionTrap>  className */
             className = App.className("ExceptionTrap", "Error");
            this.exceptionTrap = new className(this.configuration.data);
        }
        return this.exceptionTrap;
    }
    
    /**
     * Ensure that the application`s routes are loaded.
     */
    protected void loadRoutes() {
        if (
            !(cast(IRoutingApplication)this.app) || Router.routes()
        ) {
            return;
        }
        try {
            builder = Router.createRouteBuilder("/");

            this.app.routes(builder);
            if (cast(IPluginApplication)this.app) {
                this.app.pluginRoutes(builder);
            }
        } catch (Throwable  anException) {
            triggerWarning(
                "Exception loading routes when rendering an error page: \n %s - %s"
                .format(get_class(anException),
                 anException.getMessage()
            ));
        }
    }
}
