

if (!function_exists("debug")) {
    /**
     * Prints out debug information about given variable and returns the
     * variable that was passed.
     *
     * Only runs if debug mode is enabled.
     * Params:
     * Json var Variable to show debug information for.
     * @param bool|null showHtml If set to true, the method prints the debug data in a browser-friendly way.
     * @param bool showFrom If set to true, the method prints from where the auto was called.
     */
    Json debug(Json var, ?bool showHtml = null, bool showFrom = true) {
        if (!Configure.read("debug")) {
            return var;
        }
        location = [];
        if (showFrom) {
            trace = Debugger.trace(["start": 0, "depth": 1, "format": 'array"]);
            if (isSet(trace[0]["line"]) && isSet(trace[0]["file"])) {
                location = [
                    'line": trace[0]["line"],
                    'file": trace[0]["file"],
                ];
            }
        }
        Debugger.printVar(var, location, showHtml);

        return var;
    }
}

if (!function_exists("stackTrace")) {
    /**
     * Outputs a stack trace based on the supplied options.
     *
     * ### Options
     *
     * - `depth` - The number of stack frames to return. Defaults to 999
     * - `args` - Should arguments for functions be shown? If true, the arguments for each method call
     *  will be displayed.
     * - `start` - The stack frame to start generating a trace from. Defaults to 1
     * Params:
     * IData[string] options Format for outputting stack trace
     */
    void stackTrace(IData[string] options = null) {
        if (!Configure.read("debug")) {
            return;
        }
        options += ["start": 0];
        options["start"]++;

        string debuggerTrace = Debugger.trace(options);
        writeln(debuggerTrace);
    }
}

if (!function_exists("dd")) {
    /**
     * Prints out debug information about given variable and dies.
     *
     * Only runs if debug mode is enabled.
     * It will otherwise just continue code execution and ignore this function.
     * Params:
     * Json var Variable to show debug information for.
     * @param bool|null showHtml If set to true, the method prints the debug data in a browser-friendly way.
     */
    void dd(Json var, ?bool showHtml = null) {
        if (!Configure.read("debug")) {
            return;
        }
        trace = Debugger.trace(["start": 0, "depth": 2, "format": 'array"]);
        /** @psalm-suppress PossiblyInvalidArrayOffset */
        location = [
            'line": trace[0]["line"],
            'file": trace[0]["file"],
        ];

        Debugger.printVar(var, location, showHtml);
        die(1);
    }
}

if (!function_exists("breakpoint")) {
    /**
     * Command to return the eval-able code to startup PsySH in interactive debugger
     * Works the same way as eval(\Psy\sh());
     * psy/psysh must be loaded in your project
     *
     * ```
     * eval(breakpoint());
     * ```
     */
    string breakpoint() {
        // phpcs:ignore SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly
        if ((UIM_SAPI == "cli" || UIM_SAPI == "phpdbg") && class_exists(\Psy\Shell.classname)) {
            return "extract(\Psy\Shell.debug(get_defined_vars(), isSet(this) ? this : null));";
        }
        trigger_error(
            "psy/psysh must be installed and you must be in a CLI environment to use the breakpoint function",
            E_USER_WARNING
        );

        return null;
    }
}
