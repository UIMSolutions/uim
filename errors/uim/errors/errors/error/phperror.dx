module uim.errors;

import uim.errors;

@safe:

// Object wrapper around PHP errors that are emitted by `trigger_error()`
class UimError {
    private int code;

    private string amessage;

    private string afile;

    private int line;

    /**
     * Stack trace data. Each item should have a `reference`, `file` and `line` keys.
     *
     * @var array<array<string, int>>
     */
    private array trace;

    private string[int] levelMap = [
        E_PARSE: "error",
        E_ERROR: "error",
        E_CORE_ERROR: "error",
        E_COMPILE_ERROR: "error",
        E_USER_ERROR: "error",
        E_WARNING: "warning",
        E_USER_WARNING: "warning",
        E_COMPILE_WARNING: "warning",
        E_RECOVERABLE_ERROR: "warning",
        E_NOTICE: "notice",
        E_USER_NOTICE: "notice",
        E_STRICT:"`strict",
        E_DEPRECATED: "deprecated",
        E_USER_DEPRECATED: "deprecated",
    ];

    private int[string] logMap = [
        "error": LOG_ERR,
        "warning": LOG_WARNING,
        "notice": LOG_NOTICE,
        "strict": LOG_NOTICE,
        "deprecated": LOG_NOTICE,
    ];

    /**
     * Constructor
     * Params:
     * int code The PHP error code constant
     * @param string amessage The error message.
     * @param string file The filename of the error.
     * @param int line The line number for the error.
     * @param array trace The backtrace for the error.
     */
    this(
        int code,
        string amessage,
        string afile = null,
        int line = null,
        array trace = []
    ) {
        this.code = code;
        this.message = message;
        this.file = file;
        this.line = line;
        this.trace = trace;
    }
    
    // Get the PHP error constant.
    int getCode() {
        return this.code;
    }
    
    // Get the mapped LOG_constant.
    int getLogLevel() {
        label = this.getLabel();

        return this.logMap[label] ?? LOG_ERR;
    }
    
    // Get the error code label
    string getLabel() {
        return this.levelMap[this.code] ?? "error";
    }
    
    // Get the error message.
    string getMessage() {
        return this.message;
    }
    
    // Get the error file
    string getFile() {
        return this.file;
    }
    
    //  Get the error line number.
    int getLine() {
        return this.line;
    }
    
    // Get the stacktrace as an array.
    array getTrace() {
        return this.trace;
    }
    
    // Get the stacktrace as a string.
    string getTraceAsString() {
        string[] result;
        foreach (this.trace as frame) {
            result ~= !frame["line"].isEmpty
                ? "{frame["reference"]} {frame["file"]}, line {frame["line"]}"
                : frame["reference"];
        }
        return result.join("\n");
    }
}
