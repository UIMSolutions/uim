module uim.events.classes.event;

import uim.events;

@safe:

class DEvent : IEvent {
    // Name of the event
    protected string _name;

    // The object this event applies to (usually the same object that generates the event)
    protected IEventObject _subject = null;

    // Custom data for the method that receives the event
    protected IData _data;

    // Property used to retain the result value of the event listeners
    protected IData result = null;

    // Flags an event as stopped or not, default is false
    protected bool _stopped = false;

    /**
     * Constructor
     *
     * ### Examples of usage:
     *
     * ```
     * event = new Event("Order.afterBuy", this, ["buyer": userData]);
     * event = new Event("User.afterRegister", userModel);
     * ```
     * Params:
     * string aName Name of the event
     * @param object|null subject the object that this event applies to
     *  (usually the object that is generating the event).
     * @param array data any value you wish to be transported
     *  with this event to it can be read by listeners.
     * @psalm-param TSubject|null subject
     */
    this(string aName, IEventObject subject = null, IData data = IData(null)) {
        _name = aName;
        _subject = subject;
        _data = data;
    }

    // Returns the name of this event. This is usually used as the event identifier
    @property string name() {
        return _name;
    }

    // Returns the subject of this event
    IEventObject getSubject() {
        if (_subject.isNull) {
            throw new EventException("No subject set for this event");
        }
        return _subject;
    }

    // Stops the event from being used anymore
    void stopPropagation() {
        _stopped = true;
    }

    // Check if the event is stopped
    bool isStopped() {
        return _stopped;
    }

    // Get/Set the result value of the event listeners
    mixin(TProperty!("IData", "result"));

    // #region data handling
    IData opIndex(string key) {
        return data(string key);
    }

    @property IData data(string aKey) {
        if (aKey!isNull) {
            return _data[aKey] ?  ? null;
        }
        return _data;
    }

    void opIndexAssign(IData value, string key) {
        data(key, value);
    }

    @property void data(string aKey, IData aValue) {
        if (isArray(aKey)) {
            _data = aKey;
        } else {
            _data[aKey] = aValue;
        }
    }
    // #endregion data handling
}
