module uim.uim.http\Cookie;

import uim.http;

@safe:

class DCookie : ICookie {
    // Cookie name
    protected string _name = "";

    // Raw Cookie value.
    protected string[] avalue = "";

    // Whether a Json value has been expanded into an array.
    protected bool isExpanded = false;

    // Expiration time
    protected IDateTime expiresAt = null;

    protected string aPath = "/";

    protected string adomain = "";

    protected bool isSecure = false;

    protected bool isHttpOnly = false;

    // Samesite
    protected ISameSiteEnum sameSite = null;

    // Default attributes for a cookie.
    protected static @var Json[string] defaultAttributes = [
        "expires": Json(null),
        "path": Json("/"),
        "domain": "".toJson,
        "isSecure": false.toJson,
        "httponly": false.toJson,
        "samesite": Json(null),
    ];

    /**
     * Constructor
     *
     * The constructors args are similar to the native UIM `setcookie()` method.
     * The only difference is the 3rd argument which excepts null or an
     * DateTime or DateTimeImmutable object instead an integer.
     */
    this(
        string cookieName,
        string[] /* |float|bool */ cookieValue = "",
        IDateTime expiresAt = null,
        string path = null,
        string domainName = null,
        bool isSecure = null,
        bool isHttpOnly = null,
        /* SameSiteEnum| */ string sameSite = null
    ) {
        this.validateName(name);
        _name = name;

       _setValue(cookieValue);

        _domain = domainName ? domainName : defaultAttributes["domain"];
        _httpOnly = isHttpOnly ?? defaultAttributes["httponly"];
        _path = path ? path : defaultAttributes["path"];
        _isSecure = isSecure ?? defaultAttributes["isSecure"];
        _sameSite = resolveSameSiteenumeration(sameSite ?? defaultAttributes["samesite"]);

        if (expiresAt) {
            if (cast(DateTime)expiresAt) {
                expiresAt = expiresAt.clone;
            }
            /** @var \DateTimeImmutable|\DateTime expiresAt */
            expiresAt = expiresAt.setTimezone(new DateTimeZone("GMT"));
        } else {
            expiresAt = defaultAttributes["expires"];
        }
        _expiresAt = expiresAt;
    }
    
    /**
     * Set default options for the cookies.
     *
     * Valid option keys are:
     *
     * - `expires`: Can be a UNIX timestamp or `strtotime()` compatible string or `IDateTime` instance or `null`.
     * - `path`: A path string. Defauts to `'/'`.
     * - `domain`: Domain name string. Defaults to `""`.
     * - `httponly`: Boolean. Defaults to `false`.
     * - `isSecure`: Boolean. Defaults to `false`.
     * - `samesite`: Can be one of `ICookie.SAMESITE_LAX`, `ICookie.SAMESITERRORS.NOTICE`,
     *  `ICookie.SAMESITE_NONE` or `null`. Defaults to `null`.
     * Params:
     * Json[string] options Default options.
     */
    static void setDefaults(Json[string] options = null) {
        auto options = options.copy;

        if (options.hasKey("expires")) {
            options["expires"] = dateTimeInstance(options["expires"]);
        }
        if (options.hasKey("samesite")) {
            options["samesite"] = resolveSameSiteenumeration(options["samesite"]);
        }
        defaultAttributes = options.update(defaultAttributes);
    }
    
    // Factory method to create Cookie instances.
    static static create(string cookieName, /* string[]|float */ bool cookieValue, Json[string] cookieOptions = null) {
        auto updatedOptions = cookieOptions.merge(defaultAttributes);
        updatedOptions.set("expires", dateTimeInstance(updatedOptions.get("expires")));

        return new static(
            cookieName,
            cookieValue,
            updatedOptions.get("expires"),
            updatedOptions.get("path"),
            updatedOptions.get("domain"),
            updatedOptions.get("isSecure"),
            updatedOptions.get("httponly"),
            updatedOptions.get("samesite"),
        );
    }
    
    // Converts non null expiry value into IDateTime instance.
    protected static IDateTime dateTimeInstance(Json expires) {
        if (expires.isNull) {
            return null;
        }
        if (cast(IDateTime)expires) {
            return expires.setTimezone(new DateTimeZone("GMT"));
        }
        if (!isNumeric(expires)) {
            expires = strtotime(expires) ?: null;
        }
        if (expires) {
            expires = new DateTimeImmutable("@" ~ (string)expires);
        }
        return expires;
    }
    
    /**
     * Create Cookie instance from "set-cookie" header string.
     */
    static static createFromHeaderString(string cookieHeader, Json[string] defaultAttributes= null) {
        string[] someParts;
        if (cookieHeader.contains(";")) {
            cookieHeader = cookieHeader.replace("";"", "{__cookie_replace__}");
            someParts = cookieHeader.split(";").replace("{__cookie_replace__}", "";"");
        } else {
            someParts = preg_split("/\;[\t]*/", cookieHeader) ?: [];
        }
        
        string[] nameValues = split("=", (string)array_shift(someParts), 2);
        string name = array_shift(nameValues);
        string aValue = array_shift(nameValues) ?? "";

        auto someData = [
                "name": urldecode(name),
                "value": urldecode(aValue),
            ].merge(defaultAttributes);

        someParts.each!((part) {
            if (part.contains("=")) {
                [aKey, aValue] = part.split("=");
            } else {
                aKey = part;
                aValue = true;
            }
            aKey = aKey.lower;
            someData[aKey] = aValue;
        });
        if (someData.hasKey("max-age")) {
            someData.set("expires", time() + someData.getLong("max-age"));
            someData.remove("max-age");
        }
        // Ignore invalid value when parsing headers
        // https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-4.1
        if (someData.hasKey("samesite")) {
            try {
                someData["samesite"] = resolveSameSiteenumeration(someData["samesite"]);
            } catch (ValueError) {
                remove(someData["samesite"]);
            }
        }
        name = someData["name"];
        aValue = someData["value"];
        assert(isString(name) && isString(aValue));
        remove(someData["name"], someData["value"]);

        return Cookie.create(
            name,
            aValue,
            someData
        );
    }
    
    /**
     * Returns a header value as string
     */
    string toHeaderValue() {
        aValue = this.value;
        if (_isExpanded) {
            assert(isArray(aValue), "aValue is not an array");

            aValue = _flatten(aValue);
        }

        string[] aHeaderValue;
        aHeaderValue ~= "%s=%s".format(_name, rawUrlEncode(aValue));
        if (_expiresAt) {
             aHeaderValue ~= "expires=%s".format(getFormattedExpires());
        }
        if (!_path.isEmpty) {
             aHeaderValue ~= "path=%s".format(_path);
        }
        if (!_domain.isEmpty) {
             aHeaderValue ~= "domain=%s".format(_domain);
        }
        if (_sameSite) {
             aHeaderValue ~= "samesite=%s".format(_sameSite.value);
        }
        if (_isSecure) {
             aHeaderValue ~= "Secure";
        }
        if (_httpOnly) {
             aHeaderValue ~= "httponly";
        }
        return aHeaderValue.join("; ");
    }
 
    static withName(string aName) {
        this.validateName(name);
        new = this.clone;
        new.name = name;

        return new;
    }
 
    string getId() {
        return "{_name};{_domain};{_path}";
    }
 
    @property string name() {
        return _name;
    }
    
    // Validates the cookie name
    protected void validateName(string cookieName) {
        if (preg_match("/[=,;\t\r\n\013\014]/", name)) {
            throw new DInvalidArgumentException(
                "The cookie name `%s` contains invalid characters.".format(name)
            );
        }
        if (name.isEmpty) {
            throw new DInvalidArgumentException("The cookie name cannot be empty.");
        }
    }
 
    auto getValue() {
        return _value;
    }
 
    string getScalarValue() {
        if (_isExpanded) {
            assert(isArray(this.value), "aValue is not an array");

            return _flatten(this.value);
        }
        assert(isString(this.value), "aValue is not a string");

        return _value;
    }
 
    auto withValue(string[]|float|bool aValue): static
    {
        new = this.clone;
        new._setValue(aValue);

        return new;
    }
    
    /**
     * Setter for the value attribute.
     * Params:
     * string[]|float|bool aValue The value to store.
     */
    protected void _setValue(string[]|float|bool aValue) {
        _isExpanded = isArray(aValue);
        this.value = isArray(aValue) ? aValue : (string)aValue;
    }
 
    auto withPath(string aPath): static
    {
        new = this.clone;
        new.path = somePath;

        return new;
    }
 
    string getPath() {
        return _path;
    }
 
    auto withDomain(string adomain): static
    {
        new = this.clone;
        new.domain = domain;

        return new;
    }
 
    string getDomain() {
        return _domain;
    }
 
    bool isSecure() {
        return _secure;
    }
 
    auto withSecure(bool isSecure): static
    {
        new = this.clone;
        new.isSecure = isSecure;

        return new;
    }
 
    auto withHttpOnly(bool isHttpOnly): static
    {
        new = this.clone;
        new.httpOnly = isHttpOnly;

        return new;
    }
 
    bool isHttpOnly() {
        return _httpOnly;
    }
 
    auto withExpiry(IDateTime dateTime): static
    {
        if (cast(DateTime)dateTime) {
            dateTime = dateTime.clone;
        }
        new = this.clone;
        new.expiresAt = dateTime.setTimezone(new DateTimeZone("GMT"));

        return new;
    }
 
    auto getExpiry(): IDateTime
    {
        return _expiresAt;
    }
 
    int getExpiresTimestamp() {
        if (!_expiresAt) {
            return null;
        }
        return (int)_expiresAt.format("U");
    }
 
    string getFormattedExpires() {
        if (!_expiresAt) {
            return "";
        }
        return _expiresAt.format(EXPIRES_FORMAT);
    }
 
    bool isExpired(?IDateTime time = null) {
        time = time ?: new DateTimeImmutable("now", new DateTimeZone("UTC"));
        if (cast(DateTime)time) {
            time = time.clone;
        }
        if (!_expiresAt) {
            return false;
        }
        return _expiresAt < time;
    }
 
    auto withNeverExpire(): static
    {
        new = this.clone;
        new.expiresAt = new DateTimeImmutable("2038-01-01");

        return new;
    }
 
    auto withExpired(): static
    {
        new = this.clone;
        new.expiresAt = new DateTimeImmutable("@1");

        return new;
    }
 
    SameSiteEnum getSameSite() {
        return _sameSite;
    }
 
    static withSameSite(SameSiteEnum|string sameSite) {
        new = this.clone;
        new.sameSite = resolveSameSiteenumeration(sameSite);

        return new;
    }
    
    /**
     * Create SameSiteEnum instance.
     * Params:
     * \UIM\Http\Cookie\SameSiteEnum|string sameSite SameSite value
     */
    protected static SameSiteEnum resolveSameSiteenumeration(SameSiteEnum|string sameSite) {
        return match (true) {
            sameSite.isNull: sameSite,
            cast(SameSiteEnum)sameSite: sameSite,
            default: SameSiteEnum.from(ucfirst(sameSite).lower),
        };
    }
    
    /**
     * Checks if a value exists in the cookie data.
     *
     * This method will expand serialized complex data, on first use.
     */
   bool check(string pathToCheck) {
        if (_isExpanded == false) {
            assert(isString(this.value), "aValue is not a string");
            this.value = _expand(this.value);
        }
        assert(isArray(this.value), "aValue is not an array");

        return Hash.check(this.value, pathToCheck);
    }
    
    // Create a new cookie with updated data.
    static DCookie withAddedValue(string pathToWrite, Json valueToWrite) {
        DCookie newCookie = this.clone;
        if (newCookie.isExpanded == false) {
            assert(isString(new.value), "aValue is not a string");
            newCookie.value = newCookie._expand(new.value);
        }
        assert(isArray(new.value), "aValue is not an array");
        newCookie.value = Hash.insert(newCookie.value, pathToWrite, valueToWrite);

        return newCookie;
    }
    
    // Create a new cookie without a specific path
    static withoutAddedValue(string pathToRemove) {
        DCookie newCookie = this.clone;
        if (newCookie.isExpanded == false) {
            assert(isString(new.value), "aValue is not a string");
            newCookie.value = newCookie._expand(new.value);
        }
        assert(isArray(new.value), "aValue is not an array");

        newCookie.value = Hash.remove(newCookie.value, somepathToRemovePath);
        return newCookie;
    }
    
    /**
     * Read data from the cookie
     *
     * This method will expand serialized complex data,
     * on first use.
    */
    Json read(string readPath = null) {
        if (_isExpanded == false) {
            assert(isString(this.value), "aValue is not a string");

            this.value = _expand(this.value);
        }
        if (readPath.isNull) {
            return _value;
        }
        assert(this.value.isArray, "aValue is not an array");

        return Hash.get(this.value, readPath);
    }
    
    // Checks if the cookie value was expanded
    bool isExpanded() {
        return _isExpanded;
    }
 
    Json[string] getOptions() {
        options = [
            "expires": to!int(getExpiresTimestamp()),
            "path": _path,
            "domain": _domain,
            "isSecure": _isSecure,
            "httponly": _httpOnly,
        ];

        if (!_sameSite.isNull) {
            options.set("samesite", _sameSite.value);
        }
        return options;
    }
    Json[string] toArray() {
        return [
            "name": _name,
            "value": getScalarValue(),
        ] + getOptions();
    }
    
    // Implode method to keep keys are multidimensional arrays
    protected string _flatten(Json[string] mapOfKeyvalues) {
        return Json_encode(mapOfKeyvalues, Json_THROW_ON_ERROR);
    }
    
    /**
     * Explode method to return array from string set in CookieComponent._flatten()
     * Maintains reading backwards compatibility with 1.x CookieComponent._flatten().
     */
    protected string[] _expand(string encodedData) {
        _isExpanded = true;
        auto first = subString(string, 0, 1);
        if (first == "{" || first == "[") {
            return <Json_decode(encodedData, true) ? Json_decode(encodedData, true) : encodedData;
        }
        Json[string] values = null;
        foreach (pair; encodedData.split(",")) {
            string[] aKey = pair.split("|");
            if (aKey[1] !is null) {
                return aKey[0];
            }
            array[aKey[0]] = aKey[1];
        }
        return array;
    }
}
