 module uim.logging.classes.loggers.console;

import uim.logging;

@safe:

/**
 * Console logging. Writes logs to console output.
 */
class ConsoleLog : BaseLog {
    protected IConfiguration _defaultConfigData = [
        "stream": "php://stderr",
        "levels": null,
        "scopes": [],
        "outputAs": null,
        "formatter": [
            "className": DefaultFormatter.classname,
            "includeTags": true,
        ],
    ];

    // Output stream
    protected ConsoleOutput _output;

    /**
     * Constructs a new Console Logger.
     *
     * Config
     *
     * - `levels` string or array, levels the engine is interested in
     * - `scopes` string or array, scopes the engine is interested in
     * - `stream` the path to save logs on.
     * - `outputAs` integer or ConsoleOutput.[RAW|PLAIN|COLOR]
     * - `dateFormat` PHP date() format.
     *
     * configData - Options for the FileLog, see above.
     * @throws \InvalidArgumentException
     */
    this(IConfigData[string] configData = null) {
        super(configData);

        configData = configuration;
        if (cast(ConsoleOutput)configData["stream"]) {
           _output = configData["stream"];
        }  else if (isString(configData["stream"])) {
           _output = new ConsoleOutput(configData["stream"]);
        } else {
            throw new InvalidArgumentException("`stream` not a ConsoleOutput nor string");
        }
        if (isSet(configData["outputAs"])) {
           _output.setOutputAs(configData["outputAs"]);
        }
    }
    
    /**
     * : writing to console.
     * Params:
     * Json level The severity level of log you are making.
     * @param \string messageToLog The message you want to log.
     * @param array context Additional information about the logged message
     */
    void log(logLevel, string messageToLog, Json context = Json(null)) {
        string resultMessage = this.interpolate(messageToLog, context);
       _output.write(this.formatter.format(logLevel, resultMessage, context));
    }
}
