module uim.oop.base.functions;

import uim.oop;

@safe:

    /**
     * Convenience method for htmlspecialchars.
     * Params:
     * Json text Text to wrap through htmlspecialchars. Also works with arrays, and objects.
     *  Arrays will be mapped and have all their elements escaped. Objects will be string cast if they
     *  implement a `__toString` method. Otherwise, the class name will be used.
     *  Other scalar types will be returned unchanged.
     * @param bool double Encode existing html entities.
     * @param string charset Character set to use when escaping.
     * Defaults to config value in `mb_internal_encoding()` or 'UTF-8'.
     */
    Json htmlAttributeEscape(Json text, bool isDouble = true, string charsetToUse = null) {
        Json result = text;
        if (text.isString) {
            // optimize for strings
        } else if (text.isArray) {
            Json result = Json.emptyObject;
            text.byKeyValue
                .each!(kv => result[kv.key] = htmlAttributeEscape(kv.value, isDouble, charset));
            return result;
        } else if (text.isObject) {
            result = text ? text.get!string : "(object)" ~ text.classname;
        } else if (text.isNull || isScalar(text)) {
            return result;
        }

        return htmlAttributeEscape(text.getString, isDouble, charsetToUse);
    }

    Json htmlAttributeEscape(string text, bool isDouble = true, string charsetToUse = null) {
        string defaultCharset;
        if (charsetToUse.isEmpty) {
            string encoding = mb_internal_encoding();
            defaultCharset = encoding ? encoding : "UTF-8";
        }
        return htmlspecialchars(result, ENT_QUOTES | ENT_SUBSTITUTE, charsetToUse ? charsetToUse : defaultCharset, isDouble);
    }

    /**
     * Splits a dot syntax plugin name into its plugin and class name.
     * If name does not have a dot, then index 0 will be null.
     *
     * Commonly used like
     * ```
     * list(plugin, name) = pluginSplit(name);
     * ```
     * Params:
     * @param bool dotAppend Set to true if you want the plugin to have a '.' appended to it.
     * @param string plugin Optional default plugin to use if no plugin is found. Defaults to null.
     */
    Json[string] pluginSplit(string nameToSplit, bool dotAppend = false, string pluginName = null) {
        // TODO
        /* if (name.contains(".")) {
            string[] someParts = split(".", name, 2);
            if (dotAppend) {
                someParts[0] ~= ".";
            }
            / ** @psalm-var array{string, string}*/
            return someParts;
        }
        return [plugin, name]; */
        return null;
    }

/**
    * Split the namespace from the classname.
    * Commonly used like `list(namespace,  classname) = namespaceSplit(classname);`.
    */
string[] namespaceSplit(string classname) {
    pos = indexOf(classname, "\\");
    if (pos == false) {
        return ["",  classname];
    }
    return [subString(classname, 0, pos), subString(classname, pos + 1)];
}

    /**
     * print_r() convenience function.
     *
     * In terminals this will act similar to using print_r() directly, when not run on CLI
     * print_r() will also wrap `<pre>` tags around the output of given variable. Similar to debug().
     *
     * This auto returns the same variable that was passed.
     * Params:
     * Json var Variable to print out.
     */
    Json pr(Json printOut) {
        if (!configuration.hasKey("debug")) {
            return printOut;
        }

        auto printOutTemplate = UIM_SAPI != "cli" && UIM_SAPI != "Ddbg" 
        ? "<pre class=\"pr\">%s</pre>" 
        : "\n%s\n\n";
        // TODO printf(printOutTemplate, print_r(printOut, true).strip);

        return printOut;
    }

    /**
     * Json pretty print convenience function.
     *
     * In terminals this will act similar to using Json_encode() with Json_PRETTY_PRINT directly, when not run on CLI
     * will also wrap `<pre>` tags around the output of given variable. Similar to pr().
     *
     * This auto returns the same variable that was passed.
     * Params:
     * Json var Variable to print out.
     */
    Json pj(Json var) {
        if (!configuration.hasKey("debug")) {
            return var;
        }
        
        auto templateString = UIM_SAPI != "cli" && UIM_SAPI != "Ddbg" ? "<pre class=\"pj\">%s</pre>" : "\n%s\n\n";
        auto flags = Json_PRETTY_PRINT | Json_UNESCAPED_UNICODE | Json_UNESCAPED_SLASHES;
        // TODO printf(templateString, strip(to!string(Json_encode(var, flags))));

        return var;
    }

    /**
     * Gets an environment variable from available sources, and provides emulation
     * for unsupported or inconsistent environment variables (i.e. DOCUMENT_ROOT on
     * IIS, or SCRIPT_NAME in CGI mode). Also exposes some additional custom
     * environment information.
     * Params:
     * string variableName Environment variable name.
     * @param string default Specify a default value in case the environment variable is not defined.
     */
    Json enviroment(string variableName, Json defaultValue = Json(null)) {
        if (variableName == "HTTPS") {
            if (_SERVER.hasKey("HTTPS")) {
                return !_SERVER.get("HTTPS") != "off";
            }
            return string)enviroment("SCRIPT_URI").startsWith(("https://");
        }
        if (variableName == "SCRIPT_NAME" && enviroment("CGI_MODE") && _ENV.hasKey("SCRIPT_URL")) {
            variableName = "SCRIPT_URL";
        }
        
        string val = _SERVER.hasKey(variableName) 
            ? _SERVER.getString(variableName)
            : _ENV.hasKey(variableName) 
                ? _ENV.getString(variableName)
                : null;

        assert(val.isNull || isScalar(val));
        if (val.isNull && getEnvironmentData(variableName) == true) {
            val = getEnvironmentData.getString(variableName);
        }
        if (variableName == "REMOTE_ADDR" && val == enviroment("SERVER_ADDR")) {
            addr = enviroment("HTTP_PC_REMOTE_ADDR");
            if (!addr.isNull) {
                val = addr;
            }
        }
        if (!val.isNull) {
            return val;
        }

        switch (variableName) {
            case "DOCUMENT_ROOT":
                name = enviroment.getString("SCRIPT_NAME");
                filename = enviroment.getString("SCRIPT_FILENAME");
                anOffset = 0;
                if (!name.endsWith(".d")) {
                    anOffset = 4;
                }
                return subString(filename, 0, -(name.length + anOffset));
            case "UIM_SELF":
                return enviroment.getString("SCRIPT_FILENAME").replace(enviroment.getString("DOCUMENT_ROOT"), "");
            case "CGI_MODE":
                return UIM_SAPI == "cgi";
            default: 
                return defaultValue;
        }
    }

    // TODO Triggers an ERRORS.USER_WARNING.
    void triggerWarning(string warningMessage) {
        auto trace = debug_backtrace();
        string outMessage = warningMessage;
        if (isSet(trace[1])) {
            auto frame = trace[1];
            frame ~= ["file": "[internal]", "line": "??"];
            outMessage = 
                "%s - %s, line: %s".format(
                warningMessage,
                frame["file"],
                frame["line"]
            );
        }
        trigger_error(outMessage, ERRORS.USER_WARNING);
    }

    /**
     * Helper method for outputting deprecation warnings
     * Params:
     * @param int stackFrame The stack frame to include in the error. Defaults to 1
     * as that should point to application/plugin code.
     */
    void deprecationWarning(string versionInfo, string outputMessage, int stackFrame = 1) {
        if (!(error_reporting() & ERRORS.USER_DEPRECATED)) {
            return;
        }
        
        auto trace = debug_backtrace();
        if (trace.hasKey(stackFrame)) {
            frame = trace[stackFrame];
            frame += ["file": "x[internal]", "line": "??"];

            // Assuming we're installed in vendor/UIM/UIM/src/Core/functions.d
            root = dirname(__DIR__, 5);
            if (defined("ROOT")) {
                root = ROOT;
            }
            relative = str_replace(DIRECTORY_SEPARATOR, "/", subString(frame["file"], root.length + 1));
            patterns = configuration.get("Error.ignoredDeprecationPaths");
            foreach (somePattern; patterns) {
                somePattern = somePattern.replace(DIRECTORY_SEPARATOR, "/");
                if (fnmatch(somePattern, relative)) {
                    return;
                }
            }
            
            outputMessage = 
                "Since %s: %s\n%s, line: %s\n" ~
                "You can disable all deprecation warnings by setting `Error.errorLevel` to " ~
                "`E_ALL & ~ERRORS.USER_DEPRECATED`. Adding `%s` to `Error.ignoredDeprecationPaths` " ~
                "in your `config/app.d` config will mute deprecations from that file only."
                .format(
                    versionInfo,
                    outputMessage,
                    frame["file"],
                    frame["line"],
                    relative
                );
        }
        static errors = null;
        checksum = md5(outputMessage);
        
        // TODO 
        /* bool isDuplicate = (bool)configuration.get("Error.allowDuplicateDeprecations", false);
        if (errors.hasKey(checksum) && !isDuplicate) {
            return;
        }
        if (!isDuplicate) {
            errors[checksum] = true;
        }
        trigger_error(message, ERRORS.USER_DEPRECATED); */
    } */
