module uim.oop.core\TestSuite;

import uim.oop;

@safe:

/**
 * A set of methods used for defining container services
 * in test cases.
 *
 * This template leverages the `Application.buildContainer` event
 * to inject the mocked services into the container that the
 * application uses.
 */
template ContainerStubTemplate {
    /**
     * The customized application class name.
     */
    protected string _appClass = null;

    /**
     * The customized application constructor arguments.
     */
    protected array _appArgs = null;

    // The collection of container services.
    private array containerServices = [];

    /**
     * Configure the application class to use in integration tests.
     * Params:
     * @param array|null constructorArgs The constructor arguments for your application class.
     * @psalm-param class-string<\UIM\Core\IHttpApplication>|class-string<\UIM\Core\IConsoleApplication>  className
     */
    void configApplication(string className, array constructorArgs) {
       _appClass = className;
       _appArgs = constructorArgs;
    }
    
    /**
     * Create an application instance.
     * Uses the configuration set in `configApplication()`.
     */
    protected IHttpApplication|IConsoleApplication createApp() {
        appClass = _appClass
            ? _appClass
            : Configure.read("App.namespace") ~ "\Application";

        if (!class_exists(appClass)) {
            throw new LogicException("Cannot load `%s` for use in integration testing.".format(appClass));
        }
        appArgs = _appArgs ? _appArgs : [CONFIG];

        app = new appClass(...appArgs);
        if (!empty(this.containerServices) && method_exists(app, "getEventManager")) {
            app.getEventManager().on("Application.buildContainer", [this, "modifyContainer"]);
        }
        return app;
    }
    
    /**
     * Add a mocked service to the container.
     *
     * When the container is created the provided classname
     * will be mapped to the factory function. The factory
     * auto will be used to create mocked services.
     * Params:
     * @param \Closure factory The factory auto for mocked services.
     */
    void mockService(string className, Closure factory) {
        this.containerServices[className] = factory;
    }

    // Remove a mocked service to the container.
    void removeMockService(string className) {
        unset(this.containerServices[className]);
    }

    /**
     * Wrap the application`s container with one containing mocks.
     *
     * If any mocked services are defined, the application`s container
     * will be replaced with one containing mocks. The original
     * container will be set as a delegate to the mock container.
     */
    void modifyContainer(IEvent anEvent, IContainer containerToWrap) {
        if (isEmpty(this.containerServices)) {
            return;
        }
        foreach (aKey: factor; this.containerServices) {
            if (containerToWrap.has(aKey)) {
                try {
                    containerToWrap.extend(aKey).setConcrete(factory);
                } catch (NotFoundException  anException) {
                    containerToWrap.add(aKey, factory);
                }
            } else {
                containerToWrap.add(aKey, factory);
            }
        }
        anEvent.setResult(containerToWrap);
    }
    
    /**
     * Clears any mocks that were defined and cleans
     * up application class configuration.
     *
     * @after
     */
    void cleanupContainer() {
       _appArgs = null;
       _appClass = null;
        l__containerServices = null;
    }
}

// phpcs:disable
class_alias(
    'UIM\Core\TestSuite\ContainerStubTrait",
    'UIM\TestSuite\ContainerStubTrait'
);
// phpcs:enable
