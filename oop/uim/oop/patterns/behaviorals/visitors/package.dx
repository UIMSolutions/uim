/***********************************************************************************
*	Copyright: © 2015-2024 Ozan Nurettin Süel (sicherheitsschmiede)                   *
*	License  : Licensed under Apache 2 [https://apache.org/licenses/LICENSE-2.0.txt] *
*	Author   : Ozan Nurettin Süel (UIManufaktur)										           * 
***********************************************************************************/
module uim.oop.patterns.behavioral.visitors;

import uim.oop;

@safe:

/// Define an interface to represent element.
interface IComputerPart {
  void accept(IComputerPartVisitor computerPartVisitor);
}

/// Create concrete classes extending the above class.
class DKeyboard : IComputerPart {
  override void accept(IComputerPartVisitor computerPartVisitor) {
    computerPartVisitor.visit(this);
  }
}

class DComputerPartMonitor : IComputerPart {
  override void accept(IComputerPartVisitor computerPartVisitor) {
    computerPartVisitor.visit(this);
  }
}

class DMouse : IComputerPart {
  override void accept(IComputerPartVisitor computerPartVisitor) {
    computerPartVisitor.visit(this);
  }
}

class DComputer : IComputerPart {
  IComputerPart[] parts;

  this() {
    parts ~= new DMouse();
    parts ~= new DKeyboard();
    parts ~= new DComputerPartMonitor();
  }

  override void accept(IComputerPartVisitor computerPartVisitor) {
    for (int i = 0; i < parts.length; i++) {
      parts[i].accept(computerPartVisitor);
    }
    computerPartVisitor.visit(this);
  }
}

/// Define an interface to represent visitor.
interface IComputerPartVisitor {
  void visit(DComputer computer);
  void visit(DMouse mouse);
  void visit(DKeyboard keyboard);
  void visit(DComputerPartMonitor monitor);
}

/// Create concrete visitor implementing the above class.
class DComputerPartDisplayVisitor : IComputerPartVisitor {
  override void visit(DComputer computer) {
    writeln("Displaying DComputer.");
  }

  override void visit(DMouse mouse) {
    writeln("Displaying Mouse.");
  }

  override void visit(DKeyboard keyboard) {
    writeln("Displaying Keyboard.");
  }

  override void visit(DComputerPartMonitor monitor) {
    writeln("Displaying Monitor.");
  }
}

/// Use the DComputerPartDisplayVisitor to display parts of DComputer.
version (test_uim_oop) {
  unittest {
    IComputerPart computer = new DComputer();
    computer.accept(new DComputerPartDisplayVisitor());
  }
}
