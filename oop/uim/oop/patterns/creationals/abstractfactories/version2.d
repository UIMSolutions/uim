/****************************************************************************************************************
* Copyright: © 2017-2024 Ozan Nurettin Süel (aka UIManufaktur)                                                  *
* License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file.         *
* Authors: Ozan Nurettin Süel (aka UIManufaktur)                                                                *
*****************************************************************************************************************/
module uim.oop.patterns.creationals.abstractfactories.version2;public interface IPizzaIngredientFactory {  public IDough createDough();  public ISauce createSauce();  public ICheese createCheese();  public IClam createClam();}public class DNYPizzaIngredientFactory : IPizzaIngredientFactory {  public IDough createDough() {    return new DThinDough();  }  public ISauce createSauce() {    return new DMarinaraSauce();  }  public ICheese createCheese() {    return new DReggianoCheese();  }  public IClam createClam() {    return new DFreshClam();  }}public class DChicagoPizzaIngredientFactory : IPizzaIngredientFactory {  public IDough createDough() {    return new DThickDough();  }  public ISauce createSauce() {    return new DTomateSauce();  }  public ICheese createCheese() {    return new DMozzarellaCheese();  }  public IClam createClam() {    return new DFreezeClam();  }}import std.stdio;//the ancestor of all pizzaspublic abstract class DPizza {protected:  string name;  IDough dough;  ISauce sauce;  ICheese cheese;  IClam clam;public:  abstract void prepare();  // baking pizza  void bake() {    writeln("Bake for 25 minutes at 350 degrees");  }  //cutting pizza  void cut() {    writeln("Cutting the pizza into diagonal slices");  }  //pizza packaging  void box() {    writeln("Place pizza in official PizzaStore Box");  }  //get the name of the pizza  string getName() {    return name;  }  void setName(string name) {    this.name = name;  }}// Pizza with cheesepublic class DCheesePizza : DPizza {protected:  IPizzaIngredientFactory ingredientFactory;public:  this(IPizzaIngredientFactory ingredientFactory) {    this.ingredientFactory = ingredientFactory;  }  override void prepare() {    writeln("Preparing " ~ name);    dough = ingredientFactory.createDough();    sauce = ingredientFactory.createSauce();    cheese = ingredientFactory.createCheese();    clam = ingredientFactory.createClam();  }}// Pizza with musselspublic class DClamPizza : DPizza {protected:  IPizzaIngredientFactory ingredientFactory;public:  this(IPizzaIngredientFactory ingredientFactory) {    this.ingredientFactory = ingredientFactory;  }  override void prepare() {    writeln("Preparing " ~ name);    dough = ingredientFactory.createDough();    sauce = ingredientFactory.createSauce();    cheese = ingredientFactory.createCheese();    clam = ingredientFactory.createClam();  }}// General class for different types of pizzeriaspublic abstract class DPizzaStore {  // The recipe for making pizza is written here  public DPizza orderPizza(string type) {    DPizza pizza;    pizza = createPizza(type);    pizza.prepare();    pizza.bake();    pizza.cut();    pizza.box();    return pizza;  }  protected abstract DPizza createPizza(string type);}// New York pizzeriapublic class DNYPizzaStore : DPizzaStore {  override protected DPizza createPizza(string item) {    DPizza pizza = null;    IPizzaIngredientFactory ingredientFactory = new DNYPizzaIngredientFactory();    switch (item) {    case "cheese":       pizza = new DCheesePizza(ingredientFactory);      pizza.setName("NY Style Cheese Pizza");      break;    case "clam":       pizza = new DClamPizza(ingredientFactory);      pizza.setName("NY Style Clam Pizza");      break;    default:      pizza = null;      break;    }    return pizza;  }}//Chicago pizzeriapublic class DChicagoPizzaStore : DPizzaStore {  override protected DPizza createPizza(string item) {    DPizza pizza = null;    IPizzaIngredientFactory ingredientFactory = new DChicagoPizzaIngredientFactory();    switch (item) {    case "cheese":       pizza = new DCheesePizza(ingredientFactory);      pizza.setName("Chicago Style Cheese Pizza");      break;    case "clam":       pizza = new DClamPizza(ingredientFactory);      pizza.setName("Chicago Style Clam Pizza");      break;    default:      pizza = null;      break;    }    return pizza;  }}//base typeinterface IDough {}//thin baseclass DThinDough : IDough {  this() {    writeln("  ---> Thin Dough");  }}//thick baseclass DThickDough : IDough {  this() {    writeln("  ---> Thick Dough");  }}//sauce typeinterface ISauce {}//marinara sauceclass DMarinaraSauce : ISauce {  this() {    writeln("  ---> Marinara Sauce");  }}//tomato sauceclass DTomateSauce : ISauce {  this() {    writeln("  ---> Tomate Sauce");  }}//type of cheeseinterface ICheese {}//Reggiano cheeseclass DReggianoCheese : ICheese {  this() {    writeln("  ---> Reggiano Cheese");  }}//mozzarella cheeseclass DMozzarellaCheese : ICheese {  this() {    writeln("  ---> Mozzarella Cheese");  }}//mussel type (!)interface IClam {}//mussels -freshclass DFreshClam : IClam {  this() {    writeln("  ---> Fresh Clam");  }}//canned musselsclass DFreezeClam : IClam {  this() {    writeln("  ---> Freeze Clam");  }}version (test_uim_oop) {  unittest {    writeln("--- DAbstract Factory test ---");    DPizzaStore nyStore = new DNYPizzaStore();    DPizzaStore chicagoStore = new DChicagoPizzaStore();    DPizza pizza = nyStore.orderPizza("cheese");    writeln();    pizza = chicagoStore.orderPizza("cheese");    writeln();    pizza = nyStore.orderPizza("clam");  }}