/****************************************************************************************************************
* Copyright: © 2017-2024 Ozan Nurettin Süel (aka UIManufaktur)                                                  *
* License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file.         *
* Authors: Ozan Nurettin Süel (aka UIManufaktur)                                                                *
*****************************************************************************************************************/
module uim.oop.patterns.creational.abstractfactory;import uim.oop;@safe:/// Shape interface.interface IShape {   void draw();}/// Class for Rectangle Shapeclass DRectangle : IShape {   override void draw() {      writeln("Inside Rectangle::draw() method.");   }}/// Class for Square Shapeclass DSquare : IShape {  override void draw() {    writeln("Inside Square::draw() method.");  }}/// Class for Circle Shapeclass DCircle : IShape {  override void draw() {    writeln("Inside Circle::draw() method.");  }}/// Create a Factory to generate object of concrete class based on given information.class DShapeFactory {     //use createShape method to get object of type shape    IShape createShape(string shapeType) {      if(shapeType == null) {         return null;      }          if(shapeType.lower == "CIRCLE".lower) {         return new DCircle();               } else if(shapeType.lower == "RECTANGLE".lower) {         return new DRectangle();               } else if(shapeType.lower == "SQUARE".lower) {         return new DSquare();      }            return null;   }}/// Use the Factory to get object of concrete class by passing an information such as type.version(test_uim_oop) { unittest {     writeln("\nFactoryPatternDemo");  DShapeFactory shapeFactory = new DShapeFactory();  //get an object of Circle and call its draw method.  IShape shape = shapeFactory.createShape("CIRCLE");  //call draw method of Circle  if (shape) shape.draw();  //get an object of Rectangle and call its draw method.  shape = shapeFactory.createShape("RECTANGLE");  // call draw method of Rectangle  if (shape) shape.draw();  // get an object of Square and call its draw method.  shape = shapeFactory.createShape("SQUARE");  // call draw method of square if exists  if (shape) shape.draw();}}