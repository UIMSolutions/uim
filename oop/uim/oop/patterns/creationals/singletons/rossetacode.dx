//Example from https://rosettacode.org/wiki/Singleton#D
/*********************************************************************************************************
* Copyright: © 2015-2024 Ozan Nurettin Süel (Sicherheitsschmiede)                                       *
* License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file. *
* Authors: Ozan Nurettin Süel (Sicherheitsschmiede)                                                     *
*********************************************************************************************************/
module uim.oop.patterns.creational.singleton.rossetacode;

import uim.oop;
@safe:

import std.stdio ;
import std.concurrency;
import std.random;
import core.thread;
import core.thread.osthread;
 
/* class Dealer {
  private static Dealer me ;
  static Dealer Instance() {
    writefln("   Calling Dealer... ") ;
    if(me.isNull) // Double Checked Lock
      synchronized  // this part of code can only be executed by one thread a time
        if(me.isNull) 
          me = new Dealer ;     
    return me ;
  }
  private static string[] str = ["(1)Enjoy", "(2)Rosetta", "(3)Code"] ;
  private int state ;
  private this() { 
    for(int i = 0 ; i < 3 ; i++) { 
      writefln("...calling Dealer... ") ;
      msleep(rand() & 2047) ;
    }
    writefln(">>Dealer is called to come in!") ;
    state = str.length - 1 ;
  }
  Dealer nextState() {
    synchronized(this) // accessed to Object _this_ is locked ... is it necessary ???
      state = (state + 1) % str.length ;
    return this ;
  }
  override string toString() { return str[state] ; }   
} */
 
/* class DCoder : Thread {
  private string name_ ;
  Coder hasName(string name) {  name_ = name ; return this ; }
  int run() {
    msleep(rand() & 1023) ;
    writefln(">>%s come in.", name_) ;
    Dealer single = Dealer.Instance ;
    msleep(rand() & 1023) ;
    for(int i = 0 ; i < 3 ; i++) {
      writefln("%9s got %-s", name_, single.nextState) ;
      msleep(rand() & 1023) ;
    }
    return 0 ;
  }
} */
 
version(test_uim_oop) { unittest {
    writeln("\nRosettacode - Singleton");

  /* Coder x = new DCoder ; 
  Coder y = new DCoder ; 
  Coder z = new DCoder ; 
 
  x.hasName("Peter").start() ;
  y.hasName("Paul").start() ;
  z.hasName("Mary").start() ; 
 
  x.wait ;  y.wait ;  z.wait ; */  
}}