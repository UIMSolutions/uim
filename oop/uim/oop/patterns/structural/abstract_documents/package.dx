module uim.oop.patterns.structural.abstract_documents;

import uim.oop;
@safe:

/*
class DProperty {
  override string toString() { return ""; }} 
auto Property() { return new DProperty; }

class DTypeProperty : DProperty {
  this(string value) { _value = value; }
  mixin(OProperty!("string", "value")); 
  override string toString() { return "%s".format(value); }}
auto TypeProperty(string value) { return new DTypeProperty(value); }

class DModelProperty : DProperty {
  this(string value) { _value = value; }
  mixin(OProperty!("string", "value")); 
  override string toString() { return "%s".format(value); }} 
auto ModelProperty(string value) { return new DModelProperty(value); }

class DPriceProperty : DProperty {
  this(long value) { _value = value; }
  mixin(OProperty!("long", "value")); 
  override string toString() { return "%s".format(value); }} 
auto PriceProperty(long value) { return new DPriceProperty(value); }

class DPartsProperty : DProperty {  
  this(DProperty[] properties) { _properties = properties; } 
  mixin(OProperty!("DProperty[]", "properties")); 
  override string toString() {
    return properties.map!(prop => prop.toString).join(","); 
  } 
}
auto PartsProperty(DProperty[] properties) { return new DPartsProperty(properties); }

/// Document interface.
interface Document {
  /**
   * Puts the value related to the key.
   * @param value element value
   * /
  void put(string key, DProperty value);

  /**
   * Gets the value for the key.
   *
   * @param key element key
   * /
  DProperty get(string key);

  /**
   * Gets the stream of child documents.
   *
   * @param key         element key
   * @param constructor constructor of child class
   * /
  Document[] children(string key);
}

// DAbstract implementation of Document interface.
abstract class DAbstractDocument : Document {
  private DProperty[string] properties;

  protected this(DProperty[string] properties) {
    if (properties.empty) debug writeln("properties map is required");
    this.properties = properties; }

  override void put(string key, DProperty value) {
    properties[key] = value; }

  override DProperty get(string key) {
    return properties.get(key, null); }

  override Document[] children(string key) {
    return []; }

  override string toString() {
    string result;
    foreach(k, v; properties) result ~= "[%s : %s]".format(k, v);
    return result; }
}

/**
 * The DAbstract Document pattern enables handling additional, non-static properties. This pattern
 * uses concept of traits to enable type safety and separate properties of different classes into
 * set of interfaces.
 *
 * <p>In DAbstract Document pattern,({@link DAbstractDocument}) fully implements {@link Document})
 * interface. Traits are then defined to enable access to properties in usual, static way.
 */
 // class DApp {

  /**
   * Program entry point.
   * @param args command line args
   * /

/// DAbstractDocument test class
class DAbstractDocumentTest {
  private static final string KEY = "key";
  private static final string VALUE = "value";

  private static class DocumentImplementation : DAbstractDocument {
    this(DProperty[string] properties) {
      super(properties); }
  }

  private final DocumentImplementation document = new DocumentImplementation(new DHashMap<>());

  @Test
  void shouldPutAndGetValue() {
    document.put(KEY, VALUE);
    assertEquals(VALUE, document.g  this(string value) {
    _value = value; }
  mixin(OProperty!("string", "value")); }
et(KEY));
  }

  @Test
  void shouldRetrieveChildren() {
    var children = List.of(Map.of(), Map.of());

    document.put(KEY, children);

    var childrenStream = document.children(KEY, DocumentImplementation::new);
    assertNotNull(children);
    assertEquals(2, childrenStream.count());
  }

  @Test
  void shouldRetrieveEmptyStreamForNonExistingChildren() {
    var children = document.children(KEY, DocumentImplementation::new);
    assertNotNull(children);
    assertEquals(0, children.count());
  }

  @Test
  void shouldIncludePropsInToString() {
    var props = Map.of(KEY, (Object) VALUE);
    var document = new DocumentImplementation(props);
    assertTrue(document.toString().contains(KEY));
    assertTrue(document.toString().contains(VALUE));
  }

}


/// Simple App test
class DAppTest {
  /**
   * Issue: Add at least one assertion to this test case.
   *
   * Solution: Inserted assertion to check whether the execution of the main method in {@link App}
   * throws an exception.
   * /

  @Test
  void shouldExecuteAppWithoutException() {
    assertDoesNotThrow(() -> App.main(null));
  }


/// Test for Part and Car
class DomainTest {

  private static final string TEST_PART_TYPE = "test-part-type";
  private static final string TEST_PART_MODEL = "test-part-model";
  private static final long TEST_PART_PRICE = 0L;

  private static final string TEST_CAR_MODEL = "test-car-model";
  private static final long TEST_CAR_PRICE = 1L;

  @Test
  void shouldConstructPart() {
    var partProperties = Map.of(
        Property.TYPE.toString(), TEST_PART_TYPE,
        Property.MODEL.toString(), TEST_PART_MODEL,
        Property.PRICE.toString(), (Object) TEST_PART_PRICE
    );
    var part = new DPart(partProperties);
    assertEquals(TEST_PART_TYPE, part.getType().orElseThrow());
    assertEquals(TEST_PART_MODEL, part.getModel().orElseThrow());
    assertEquals(TEST_PART_PRICE, part.getPrice().orElseThrow());
  }

  @Test
  void shouldConstructCar() {
    var carProperties = Map.of(
        Property.MODEL.toString(), TEST_CAR_MODEL,
        Property.PRICE.toString(), TEST_CAR_PRICE,
        Property.PARTS.toString(), List.of(Map.of(), Map.of())
    );
    var car = new DCar(carProperties);
    assertEquals(TEST_CAR_MODEL, car.getModel().orElseThrow());
    assertEquals(TEST_CAR_PRICE, car.getPrice().orElseThrow());
    assertEquals(2, car.getParts().count());
  }

}

/// Test for Part and Car
class DomainTest {
  private static final string TEST_PART_TYPE = "test-part-type";
  private static final string TEST_PART_MODEL = "test-part-model";
  private static final long TEST_PART_PRICE = 0L;

  private static final string TEST_CAR_MODEL = "test-car-model";
  private static final long TEST_CAR_PRICE = 1L;

  @Test
  void shouldConstructPart() {
    var partProperties = Map.of(
        Property.TYPE.toString(), TEST_PART_TYPE,
        Property.MODEL.toString(), TEST_PART_MODEL,
        Property.PRICE.toString(), (Object) TEST_PART_PRICE
    );
    var part = new DPart(partProperties);
    assertEquals(TEST_PART_TYPE, part.getType().orElseThrow());
    assertEquals(TEST_PART_MODEL, part.getModel().orElseThrow());
    assertEquals(TEST_PART_PRICE, part.getPrice().orElseThrow());
  }

  @Test
  void shouldConstructCar() {
    var carProperties = Map.of(
        Property.MODEL.toString(), TEST_CAR_MODEL,
        Property.PRICE.toString(), TEST_CAR_PRICE,
        Property.PARTS.toString(), List.of(Map.of(), Map.of())
    );
    var car = new DCar(carProperties);
    assertEquals(TEST_CAR_MODEL, car.getModel().orElseThrow());
    assertEquals(TEST_CAR_PRICE, car.getPrice().orElseThrow());
    assertEquals(2, car.getParts().count());
  }

}
* /

version(test_uim_oop) { unittest {
    writeln("Abstract Document Demo"); 

    writeln("Constructing parts and car");

    DProperty[] wheelProperties = [
      TypeProperty("wheel"), 
      ModelProperty("15C"), 
      PriceProperty(100L)];

    DProperty[] doorProperties = [
      TypeProperty("door"), 
      ModelProperty("Lambo"), 
      PriceProperty(300L)];

    DProperty[] carProperties = [
        ModelProperty("300SL"), 
        PriceProperty(10000L), 
        PartsProperty([wheelProperties, doorProperties])];

    auto car = new DCar(carProperties);

    debug writeln("Here is our car:");
    debug writeln("-> model: {}", car.getModel().orElseThrow());
    debug writeln("-> price: {}", car.getPrice().orElseThrow());
    debug writeln("-> parts: ");
    car.getParts().forEach(p -> LOGGER.info("\t{}/{}/{}",
        p.getType().orElse(null),
        p.getModel().orElse(null),
        p.getPrice().orElse(null))
    );
  }
}
  }
}
* /
// } */
