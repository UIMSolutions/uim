/*********************************************************************************************************
  Copyright: © 2015-2024 Ozan Nurettin Süel (UIManufaktur)                                        
  License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file.  
  Authors: Ozan Nurettin Süel (UIManufaktur)                                                      
**********************************************************************************************************/
module uim.oop.patterns.filters;

import uim.oop;

@safe:

class DPerson {
  this(string name, string gender, string maritalStatus) {
    _name = name;
    _gender = gender;
    _maritalStatus = maritalStatus;
  }

  private string _name;
  @property string name() {
    return _name;
  }

  private string _gender;
  @property string gender() {
    return _gender;
  }

  private string _maritalStatus;
  @property string maritalStatus() {
    return _maritalStatus;
  }
}

interface ICriteria {
  DPerson[] meetCriteria(DPerson[] persons);
}

class DCriteriaMale : ICriteria {
  override DPerson[] meetCriteria(DPerson[] persons) {
    return persons.filter!(a => a.gender.lower == "male").array;
  }
}

class DCriteriaFemale : ICriteria {
  override DPerson[] meetCriteria(DPerson[] persons) {
    return persons.filter!(a => a.gender.lower == "female").array;
  }
}

class DCriteriaSingle : ICriteria {
  override DPerson[] meetCriteria(DPerson[] persons) {
    return persons.filter!(a => a.maritalStatus.lower == "single").array;
  }
}

class DAndCriteria : ICriteria {
  private ICriteria _criteria;
  private ICriteria _otherCriteria;

  this(ICriteria criteria, ICriteria otherCriteria) {
    _criteria = criteria;
    _otherCriteria = otherCriteria;
  }

  override DPerson[] meetCriteria(DPerson[] persons) {
    return _otherCriteria.meetCriteria(
      _criteria.meetCriteria(persons));
  }
}

class DOrCriteria : ICriteria {
  private ICriteria _criteria;
  private ICriteria _otherCriteria;

  this(ICriteria criteria, ICriteria otherCriteria) {
    _criteria = criteria;
    _otherCriteria = otherCriteria;
  }

  override DPerson[] meetCriteria(DPerson[] persons) {
    DPerson[] firstCriteriaItems = _criteria.meetCriteria(persons);
    DPerson[] otherCriteriaItems = _otherCriteria.meetCriteria(persons);

    return otherCriteriaItems
      .filter!(person => !firstCriteriaItems.hasPerson(person))
      .array;
  }
}

void printPersons(DPerson[] persons) {
  persons
    .each!(person =>
        writeln(
          "Person : [Name : ", person.name,
          ", Gender : ", person.gender,
          ", Marital Status : ", person.maritalStatus,
          " ]"
        )
    );
}

bool hasPerson(DPerson[] persons, DPerson person) {
  foreach (p; persons)
    if (p is person) {
      return true;
    }
  return false;
}

version (test_uim_oop) {
  unittest {
    DPerson[] persons;

    persons ~= (new DPerson("Robert", "Male", "Single"));
    persons ~= (new DPerson("John", "Male", "Married"));
    persons ~= (new DPerson("Laura", "Female", "Married"));
    persons ~= (new DPerson("Diana", "Female", "Single"));
    persons ~= (new DPerson("Mike", "Male", "Single"));
    persons ~= (new DPerson("Bobby", "Male", "Single"));

    ICriteria male = new DCriteriaMale();
    ICriteria female = new DCriteriaFemale();
    ICriteria single = new DCriteriaSingle();
    ICriteria singleMale = new DAndCriteria(single, male);
    ICriteria singleOrFemale = new DOrCriteria(single, female);

    writeln("Males: ");
    printPersons(male.meetCriteria(persons));

    writeln("\nFemales: ");
    printPersons(female.meetCriteria(persons));

    writeln("\nSingle Males: ");
    printPersons(singleMale.meetCriteria(persons));

    writeln("\nSingle Or Females: ");
    printPersons(singleOrFemale.meetCriteria(persons));
  }
}
