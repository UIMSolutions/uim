module uim.oop.tests.constraints.eventfiredwith;

import uim.oop;

@safe:

/**
 * EventFiredWith constraint
 *
 * @internal
 */
class DEventFiredWith : DConstraint {
    /*
    // Array of fired events
    protected IEventManager _eventManager;

    // Event data key
    protected string _dataKey;

    // Event data value
    protected Json _dataValue;

    this(DEventManager eventManager, string key, Json value) {
       _eventManager = eventManager;
       _dataKey = key;
       _dataValue = value;

        if (_eventManager.getEventList().isNull) {
            throw new AssertionFailedError(
                "The event manager you are asserting against is not configured to track events."
            );
        }
    }
    
    // Checks if event is in fired array
    bool matches(Json constraintCheckValue) {
        firedEvents = null;
        list = _eventManager.getEventList();
        if (list !is null) {
            totalEvents = count(list);
            for (anException = 0;  anException < totalEvents;  anException++) {
                firedEvents ~= list[anException];
            }
        }
        eventGroup = (new DCollection(firedEvents))
            .groupBy(string (IEvent event) {
                return event.name;
            })
            .toArray();

        if (!array_key_hasKey(constraintCheckValue, eventGroup)) {
            return false;
        }
        /** @var array<\UIM\Event\IEvent<object>> events */
        events = eventGroup[constraintCheckValue];

        if (count(events) > 1) {
            throw new AssertionFailedError(
                "Event `%s` was fired %d times, cannot make data assertion".format(
                constraintCheckValue,
                count(events)
            ));
        }
        event = events[0];

        if (array_key_hasKey(_dataKey, /* (array) */event.getData()) == false) {
            return false;
        }
        return event.getData(_dataKey) == _dataValue;
    }
    
    // Assertion message string
    override string toString() {
        return "was fired with " ~ _dataKey ~ " matching " ~ to!string(_dataValue);
    }
}
