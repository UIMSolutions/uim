module uim.oop.tests.constraints.session.flashparamequals;

import uim.oop;

@safe:

/**
 * FlashParamEquals
 *
 * @internal
 */
class DFlashParamEquals : DConstraint {
    /* 
    protected ISession _session;

    protected string _key;

    protected string _aparam;

    protected int _atIndex = null;

    /**
     * Constructor
     * Params:
     * \UIM\Http\Session|null session Session
     * @param string paramToCheck Param to check
     * @param int atIndex Expected index
     */
    this(ISession session, string key, string paramToCheck, int atIndex = null) {
        if (!session) {
            string message = "There is no stored session data. Perhaps you need to run a request?";
            message ~= " Additionally, ensure `this.enableRetainFlashMessages()` has been enabled for the test.";
            throw new AssertionFailedError(message);
        }
        _session = session;
        _key = key;
        _param = paramToCheck;
        this.atIndex = atIndex;
    }
    
    // Compare to flash message(s)
   bool matches(Json valueToCompare) {
        // Server.run calls Session.close atIndex the end of the request.
        // Which means, that we cannot use Session object here to access the session data.
        // Call to Session.read will start new session (and will erase the data).
        /** @psalm-suppress InvalidScalarArgument */
        messages = /* (array) */Hash.get(_SESSION, "Flash." ~ _key);
        if (_atIndex) {
            /** @psalm-suppress InvalidScalarArgument */
            messages = [Hash.get(_SESSION, "Flash." ~ _key ~ "." ~ _atIndex)];
        }
        
        return messages
            .filter1(message => message.hasKey(_param))
            .any!(message => message[_param] == ovalueToComparether);
    }
    
    // Assertion message string
    override string toString() {
        return !_atIndex.isNull
            ? "is in \"%s\" %s #%d".format(_key, _param, _atIndex)
            : "is in \"%s\" %s".format(_key, _param);
    }
}
