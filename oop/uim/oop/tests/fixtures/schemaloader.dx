module uim.oop.TestSuite\Fixture;

import uim.oop;

@safe:

/*
use InvalidArgumentException;
/**
 * Create test database schema from one or more SQL dump files.
 *
 * This class DCan be useful to create test database schema when
 * your schema is managed by tools external to your UIM
 * application.
 *
 * It is not well suited for applications/plugins that need to
 * support multiple database platforms. You should use migrations
 * for that instead.
 */
class DSchemaLoader {
    protected DConnectionHelper helper;

    this() {
        this.helper = new DConnectionHelper();
    }
    
    /**
     * Load and apply schema sql file, or an array of files.
     * Params:
     * string[]|string aPaths Schema files to load
     * @param string aconnectionName Connection name
     * @param bool dropTables Drop all tables prior to loading schema files
     * @param bool truncateTables Truncate all tables after loading schema files
     */
    void loadSqlFiles(
        string[] aPaths,
        string aconnectionName = "test",
        bool dropTables = true,
        bool truncateTables = false
    ) {
        files = (array)somePaths;

        // Don"t create schema if we are in a phpunit separate process test method.
        if (isSet(GLOBALS["__PHPUNIT_BOOTSTRAP"])) {
            return;
        }
        if (dropTables) {
            this.helper.dropTables(aConnectionName);
        }
        /** @var \UIM\Database\Connection aConnection */
        aConnection = ConnectionManager.get(aConnectionName);
        files.each!((file) {
            if (!file_exists(file)) {
                throw new DInvalidArgumentException(
                    "Unable to load SQL file `%s`.".format(file));
            }
            sql = file_get_contents(file);
            if (sql == false) {
                throw new UimException("Cannot read file content of `%s`".format(file));
            }
            // Use the underlying PDO connection so we can avoid prepared statements
            // which don"t support multiple queries in postgres.
            driver = aConnection.getDriver();
            driver.exec(sql);
        });
        
        if (truncateTables) {
            this.helper.truncateTables(aConnectionName);
        }
    }
    
    /**
     * Load and apply UIM schema file.
     *
     * This method will process the array returned by `file` and treat
     * the contents as a list of table schema.
     *
     * An example table is:
     *
     * ```
     * return [
     *  "articles": [
     *     "columns": [
     *         "id": [
     *             "type": "integer",
     *         ],
     *         "author_id": [
     *             "type": "integer",
     *             "null": BooleanData(true),
     *         ],
     *         "title": [
     *             "type": "string",
     *             "null": BooleanData(true),
     *         ],
     *         "body": "text",
     *         "published": [
     *             "type": "string",
     *             "length": 1,
     *             "default": "N",
     *         ],
     *     ],
     *     "constraints": [
     *         "primary": [
     *             "type": "primary",
     *             "columns": [
     *                 "id",
     *             ],
     *         ],
     *     ],
     *  ],
     * ];
     * ```
     *
     * This schema format can be useful for plugins that want to include
     * tables to test against but don"t need to include production
     * ready schema via migrations. Applications should favour using migrations
     * or SQL dump files over this format for ease of maintenance.
     *
     * A more complete example can be found in `tests/schema.d`.
     * Params:
     * string afile Schema file
     * @param string aconnectionName Connection name
     * @throws \InvalidArgumentException For missing table name(s).
     */
    void loadInternalFile(string afile, string aconnectionName = "test") {
        // Don"t reload schema when we are in a separate process state.
        if (isSet(GLOBALS["__PHPUNIT_BOOTSTRAP"])) {
            return;
        }
        this.helper.dropTables(aConnectionName);

        aTables = include file;

        /**
         * @var \UIM\Database\Connection aConnection
         */
        aConnection = ConnectionManager.get(aConnectionName);
        aConnection.disableConstraints(void (Connection aConnection) use (aTables) {
            foreach (aTables as aTableName: aTable) {
                name = aTable["table"] ?? aTableName;
                if (!isString(name)) {
                    throw new DInvalidArgumentException(
                        "`%s` is not a valid table name. Either use a string key for the table definition"
                            ~ "(`\"articles\": [...]`) or define the `table` key in the table definition.".format(name)
                    );
                }
                tableSchema = new DTableSchema(name, aTable["columns"]);
                if (isSet(aTable["indexes"])) {
                    foreach (aTable["indexes"] as aKey:  anIndex) {
                        tableSchema.addIndex(aKey,  anIndex);
                    }
                }
                if (isSet(aTable["constraints"])) {
                    aTable["constraints"].byKeyValue
                        .each!(kv => tableSchema.addConstraint(aKey,  anIndex));
                }
                
                // Generate SQL for each table.
                tableSchema.createSql(aConnection).each!(sql => aConnection.execute(sql));
            }
        });
    }
}
