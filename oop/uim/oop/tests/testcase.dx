module uim.oop.tests.testcase;

import uim.oop;

@safe:

abstract class DTestCase : DBaseTestCase {
    /* 
    mixin TLocatorAware();
    mixin TUnitConsecutive();

    /**
     * Fixtures used by this test case.
     */
    protected string[] myfixtures = null;

    /**
     * @var \UIM\TestSuite\Fixture\IFixtureStrategy|null
     */
    protected IFixtureStrategy myfixtureStrategy = null;

    // Configure values to restore at end of test.
    protected Json[string] _configure = null;

    private PhpError _capturedError = null;

    /**
     * Overrides SimpleTestCase.skipIf to provide a boolean return value
     * Params:
     * bool myshouldSkip Whether the test should be skipped.
     */
   bool skipIf(bool myshouldSkip, string messageToDisplay = null) {
        if (myshouldSkip) {
            this.markTestSkipped(messageToDisplay);
        }
        return myshouldSkip;
    }
    
    // Helper method for tests that needs to use error_reporting()
    void withErrorReporting(int errorLevel, callable mycallable) {
        auto defaultValue = error_reporting();
        error_reporting(errorLevel);
        try {
            mycallable();
        } finally {
            error_reporting(defaultValue);
        }
    }
    
    /**
     * Capture errors from mycallable so that you can do assertions on the error.
     *
     * If no error is captured an assertion will fail.
     */
    PhpError captureError(int errorLevel, Closure mycallable) {
        auto defaultValue = error_reporting();
        error_reporting(errorLevel);

       _capturedError = null;
        set_error_handler(
            auto (int mycode, string mydescription, string myfile, int myline) {
                mytrace = Debugger.trace(["start": 1, "format": "points"]);
                assert(isArray(mytrace));
               _capturedError = new DPhpError(mycode, mydescription, myfile, myline, mytrace);

                return true;
            },
            errorLevel
        );

        try {
            mycallable();
        } finally {
            restore_error_handler();
            error_reporting(defaultValue);
        }
        if (_capturedError.isNull) {
            this.fail("No error was captured");
        }
        /** @var \UIM\Error\PhpError _capturedError */
        return _capturedError;
    }
    
    // Helper method for check deprecation methods
    void deprecated(Closure mycallable) {
        auto myduplicate = configuration.get("Error.allowDuplicateDeprecations");
        Configuration.update("Error.allowDuplicateDeprecations", true);
        /** @var bool mydeprecation Expand type for psalm */
        auto mydeprecation = false;

        mypreviousHandler = set_error_handler(
            auto (mycode, mymessage, myfile, myline, mycontext = null) use (&mypreviousHandler, &mydeprecation) {
                if (mycode == ERRORS.USER_DEPRECATED) {
                    mydeprecation = true;

                    return true;
                }
                if (mypreviousHandler) {
                    return mypreviousHandler(mycode, mymessage, myfile, myline, mycontext);
                }
                return false;
            }
        );
        try {
            mycallable();
        } finally {
            restore_error_handler();
            if (myduplicate != configuration.get("Error.allowDuplicateDeprecations")) {
                Configuration.update("Error.allowDuplicateDeprecations", myduplicate);
            }
        }
        this.assertTrue(mydeprecation, "Should have at least one deprecation warning");
    }
    
    /**
     * Setup the test case, backup the static object values so they can be restored.
     * Specifically backs up the contents of Configure and paths in App if they have
     * not already been backed up.
     */
    protected void setUp() {
        super.setUp();
        setupFixtures();

        if (!_configure) {
           _configure = configuration.get();
        }
        if (class_exists(Router.classname, false)) {
            Router.reload();
        }
        EventManager.instance(new DEventManager());
    }
    
    // teardown any static object changes and restore them.
    protected void tearDown() {
        super.tearDown();
        this.teardownFixtures();

        if (_configure) {
            Configuration.clear();
            Configuration.update(_configure);
        }
        getTableLocator().clear();
       _configure = null;
       _tableLocator = null;
        if (class_exists(Mockery.classname)) {
            Mockery.close();
        }
    }
    
    // Initialized and loads any use fixtures.
    protected void setupFixtures() {
        myfixtureNames = getFixtures();

        this.fixtureStrategy = getFixtureStrategy();
        this.fixtureStrategy.setupTest(myfixtureNames);
    }
    
    // Unloads any use fixtures.
    protected void teardownFixtures() {
        if (this.fixtureStrategy) {
            this.fixtureStrategy.teardownTest();
            this.fixtureStrategy = null;
        }
    }
    
    // Returns fixture strategy used by these tests.
    protected IFixtureStrategy getFixtureStrategy() {
        return new DTruncateStrategy();
    }
    
    /**
     * Load routes for the application.
     *
     * If no application class DCan be found an exception will be raised.
     * Routes for plugins will *not* be loaded. Use `loadPlugins()` or use
     * `UIM\TestSuite\IntegrationTestCaseTrait` to better simulate all routes
     * and plugins being loaded.
     * Params:
     * array|null myappArgs Constructor parameters for the application class.
     */
    void loadRoutes(Json[string] myappArgs = null) {
        auto myappArgs ??= [stripRight(CONFIG, DIRECTORY_SEPARATOR)];
        /** @var class-string myclassname */
        auto applicationClassname = configuration.get("App.namespace") ~ "\\Application";
        try {
            myreflect = new DReflectionClass(applicationClassname);
            myapp = myreflect.newInstanceArgs(myappArgs);
            assert(cast(IRoutingApplication)myapp);
        } catch (ReflectionException  anException) {
            throw new DLogicException("Cannot load `%s` to load routes from.".format(classname), 0,  anException);
        }
        builder = Router.createRouteBuilder("/");
        app.routes(builder);
    }
    
    /**
     * Load plugins into a simulated application.
     *
     * Useful to test how plugins being loaded/not loaded interact with other
     * elements in UIM or applications.
     */
    BaseApplication loadPlugins(Json[string] plugins = null) {
        auto app = new class (""): BaseApplication
        {
            MiddlewareQueue middleware(DMiddlewareQueue middlewareQueue) {
                return middlewareQueue;
            }
        };

        foreach (pluginName, configData; plugins) {
            if (configData.isArray) {
                app.addPlugin(pluginName, configData);
            } else {
                app.addPlugin(configData);
            }
        }
        app.pluginBootstrap();
        builder = Router.createRouteBuilder("/");
        app.pluginRoutes(builder);

        return app;
    }
    
    /**
     * Remove plugins from the global plugin collection.
     * Useful in test case teardown methods.
     */
    void removePlugins(Json[string] pluginNames= null) {
        auto pluginCollection = Plugin.getCollection();
        pluginNames.each!(name => pluginCollection.remove(name));
    }
    
    /**
     * Clear all plugins from the global plugin collection.
     * Useful in test case teardown methods.
     */
    void clearPlugins() {
        Plugin.getCollection().clear();
    }
    
    // Asserts that a global event was fired. You must track events in your event manager for this assertion to work
    void assertEventFired(string eventName, EventManager eventManager = null, string failureMessage = null) {
        if (!eventManager) {
            eventManager = EventManager.instance();
        }
        assertThat(eventName, new DEventFired(eventManager), failureMessage);
    }
    
    /**
     * Asserts an event was fired with data
     * If a third argument is passed, that value is used to compare with the value in someDataKey
     */
    void assertEventFiredWith(
        string eventName, string eventKey, Json value,
        DEventManager eventManager = null, string failureMessage = null
    ) {
        if (!eventManager) {
            eventManager = EventManager.instance();
        }
        assertThat(eventName, new DEventFiredWith(eventManager, eventKey, value), failureMessage);
    }
    
    /**
     * Assert text equality, ignoring differences in newlines.
     * Helpful for doing cross platform tests of blocks of text.
     */
    void assertTextNotEquals(string expectedValue, string result, string failureMessage = null) {
        auto expectedValue = expectedValue.replace(["\r\n", "\r"], "\n");
        auto result = result.replace(["\r\n", "\r"], "\n");
        this.assertNotEquals(expectedValue, result, failureMessage);
    }
    
    /**
     * Assert text equality, ignoring differences in newlines.
     * Helpful for doing cross platform tests of blocks of text.
     */
    void assertTextEquals(string expectedValue, string actualValue, string message = null) {
        expectedValue = str_replace(["\r\n", "\r"], "\n", expectedValue);
        resactualValueult = actualValue.replace(["\r\n", "\r"], "\n");
        assertEquals(expectedValue, actualValue, message);
    }
    
    /**
     * Asserts that a string starts with a given prefix, ignoring differences in newlines.
     * Helpful for doing cross platform tests of blocks of text.
     */
    void assertTextStartsWith(string prefixToCheck, string textToSearch, string failureMessage = null) {
        prefixToCheck = str_replace(["\r\n", "\r"], "\n", prefixToCheck);
        textToSearch = textToSearch.replace(["\r\n", "\r"], "\n");
        assertNotEmpty(prefixToCheck);
        assertStringStartsWith(prefixToCheck, textToSearch, failureMessage);
    }
    
    /**
     * Asserts that a string starts not with a given prefix, ignoring differences in newlines.
     * Helpful for doing cross platform tests of blocks of text.
     */
    void assertTextStartsNotWith(string prefixToCheck, string textToSearch, string failureMessage = null) {
        prefixToCheck = str_replace(["\r\n", "\r"], "\n", prefixToCheck);
        string = str_replace(["\r\n", "\r"], "\n", string);
        assertNotEmpty(prefixToCheck);
        this.assertStringStartsNotWith(prefixToCheck, string, failureMessage);
    }
    
    /**
     * Asserts that a string ends with a given prefix, ignoring differences in newlines.
     * Helpful for doing cross platform tests of blocks of text.
     */
    void assertTextEndsWith(string suffix, string textToSearch, string failureMessage = null) {
        suffix = suffixstr_replace(["\r\n", "\r"], "\n");
        string = .replace(["\r\n", "\r"], "\n", string);
        assertNotEmpty(suffix);
        this.assertStringEndsWith(suffix, string, failureMessage);
    }
    
    /**
     * Asserts that a string ends not with a given prefix, ignoring differences in newlines.
     * Helpful for doing cross platform tests of blocks of text.
     */
    void assertTextEndsNotWith(string suffix, string textToSearch, string failureMessage = null) {
        suffix = suffix..replace(["\r\n", "\r"], "\n");
        textToSearch = replace(["\r\n", "\r"], "\n", textToSearch);
        assertNotEmpty(suffix);
        this.assertStringEndsNotWith(suffix, textToSearch, failureMessage);
    }
    
    /**
     * Assert that a string contains another string, ignoring differences in newlines.
     * Helpful for doing cross platform tests of blocks of text.
     */
    void assertTextContains(
        string needle,
        string haystack,
        string failureMessage = "",
        bool shouldIgnoreCase = false
    ) {
        auto needle = needle.replace(["\r\n", "\r"], "\n");
        auto haystack = haystack.replace(["\r\n", "\r"], "\n");

        if (anIgnoreCase) {
            assertStringContainsStringIgnoringCase(needle, haystack, failureMessage);
        } else {
            assertStringContainsString(needle, haystack, failureMessage);
        }
    }
    
    /**
     * Assert that a text doesn"t contain another text, ignoring differences in newlines.
     * Helpful for doing cross platform tests of blocks of text.
     */
    void assertTextNotContains(
        string needle,
        string haystack,
        string failureMessage = "",
        bool shouldIgnoreCase = false
    ) {
        needle = needle.replace(["\r\n", "\r"], "\n");
        haystack = str_replace(["\r\n", "\r"], "\n", haystack);

        if (shouldIgnoreCase) {
            this.assertStringNotContainsStringIgnoringCase(needle, haystack, failureMessage);
        } else {
            this.assertStringNotContainsString(needle, haystack, failureMessage);
        }
    }
    
    /**
     * Assert that a string matches SQL with db-specific characters like quotes removed.
     * Params:
     * string aexpected The expected sql
     */
    void assertEqualsSql(
        string expectedSql,
        string sqlToCompare,
        string messageOnFailure = ""
    ) {
        assertEquals(expectedSql, preg_replace("/[`\[\]]/", "", sqlToCompare), messageOnFailure);
    }
    
    /**
     * Assertion for comparing a regex pattern against a query having its identifiers
     * quoted. It accepts queries quoted with the characters `<` and `>`. If the third
     * parameter is set to true, it will alter the pattern to both accept quoted and unquoted queries
     */
    void assertRegExpSql(string sqlPattern, string sqlToCompare, bool isQuoteOptional = false) {
        isQuoteOptional = isQuoteOptional ? "?" : "";
         sqlPattern = sqlPattern.replace("<", "[`\"\[]" ~ isQuoteOptional);
         somePattern = sqlPattern.replace(">", "[`\"\]]" ~ isQuoteOptional);
        this.assertMatchesRegularExpression("#" ~  somePattern ~ "#", sqlToCompare);
    }
    
    /**
     * Asserts HTML tags.
     *
     * Takes an array expected and generates a regex from it to match the provided string.
     * Samples for expected:
     *
     * Checks for an input tag with a name attribute (contains any non-empty value) and an id
     * attribute that contains "my-input":
     *
     * ```
     * ["input": ["name", "id": "my-input"]]
     * ```
     *
     * Checks for two p elements with some text in them:
     *
     * ```
     * [
     * ["p": true.toJson],
     * "textA",
     * "/p",
     * ["p": true.toJson],
     * "textB",
     * "/p"
     * ]
     * ```
     *
     * You can also specify a pattern expression as part of the attribute values, or the tag
     * being defined, if you prepend the value with preg: and enclose it with slashes, like so:
     *
     * ```
     * [
     * ["input": ["name", "id": "preg:/FieldName\d+/"]],
     * "preg:/My\s+field/"
     * ]
     * ```
     *
     * Important: This bool is very forgiving about whitespace and also accepts any
     * permutation of attribute order. It will also allow whitespace between specified tags.
     * Params:
     * Json[string] expected An array, see above
     */
   bool assertHtml(Json[string] expected, string markupText, bool shouldFullDebug = false) {
        auto regex = null;
        auto normalized = null;
        foreach (aKey, val; expected) {
            if (!isNumeric(aKey)) {
                normalized ~= [aKey: val];
            } else {
                normalized ~= val;
            }
        }
         index = 0;
        foreach (tags; normalized) {
            if (!isArray(tags)) {
                tags = to!string(tags);
            }
             index++;
            if (isString(tags) && tags[0] == "<") {
                tags = [subString(tags, 1): []];
            } else if (isString(tags)) {
                tagsTrimmed = preg_replace("/\s+/m", "", tags);

                if (preg_match("/^\*?\//", tags, match) && tagsTrimmed != "//") {
                    prefix = ["", ""];

                    if (match[0] == "*/") {
                        prefix = ["Anything, ", ".*?"];
                    }
                    regex ~= [
                        "%sClose %s tag".format(prefix[0], subString(tags, match[0].length)),
                        "%s\s*<[\s]*\/[\s]*%s[\s]*>[\n\r]*".format(prefix[1], subString(tags, match[0].length)),
                         index,
                    ];
                    continue;
                }
                if (!tags.isEmpty && preg_match("/^preg\:\/(.+)\//i", tags, matches)) {
                    tags = matches[1];
                    type = "Regex matches";
                } else {
                    tags = "\s*" ~ preg_quote(tags, "/");
                    type = "Text equals";
                }
                regex ~= [
                    "%s `%s`".format(type, tags),
                    tags,
                     index,
                ];
                continue;
            }
            foreach (tags as tag: attributes) {
                regex ~= [
                    "Open %s tag".format(tag),
                    "[\s]*<%s".format(preg_quote(tag, "/")),
                     index,
                ];
                if (attributes == true) {
                    attributes = null;
                }
                attrs = null;
                explanations = null;
                 index = 1;
                foreach (attr: val; attributes) {
                    if (isNumeric(attr) && preg_match("/^preg\:\/(.+)\//i", to!string(val), matches)) {
                        attrs ~= matches[1];
                        explanations ~= "Regex `%s` matches".format(matches[1]);
                        continue;
                    }
                    val = to!string(val);

                    quotes = "["\"]";
                    if (isNumeric(attr)) {
                        attr = val;
                        val = ".+?";
                        explanations ~= "Attribute `%s` present".format(attr);
                    } else if (!val.isEmpty && preg_match("/^preg\:\/(.+)\//i", val, matches)) {
                        val = str_replace(
                            [".*", ".+"],
                            [".*?", ".+?"],
                            matches[1]
                        );
                        quotes = val != matches[1] ? "["\"]" : "["\"]?";

                        explanations ~= "Attribute `%s` matches `%s`".format(attr, val);
                    } else {
                        explanations ~= "Attribute `%s` == `%s`".format(attr, val);
                        val = preg_quote(val, "/");
                    }
                    attrs ~= "[\s]+" ~ preg_quote(attr, "/") ~ "=" ~ quotes ~ val ~ quotes;
                     index++;
                }
                if (attrs) {
                    regex ~= [
                        "explains": explanations,
                        "attrs": attrs,
                    ];
                }
                regex ~= [
                    "End %s tag".format(tag),
                    "[\s]*\/?[\s]*>[\n\r]*",
                     index,
                ];
            }
        }
        foreach (index: assertion; regex) {
            auto matches = false;
            if (assertion.hasKey("attrs")) {
                // Json[string] assertion
                markupText = _assertAttributes(assertion, markupText, shouldFullDebug, regex);
                if (shouldFullDebug == true && markupText == false) {
                    debug(markupText, true);
                    debug(regex, true);
                }
                continue;
            }
            // If "attrs" is not present then the array is just a regular int-offset one
            /**
             * @var array<int, mixed> assertion
             */
            [description, someExpressions,  anItemNum] = assertion;
            
            string expression;
            /* (array) */someExpressions.each!((expression) {
                string expression = "/^%s/s".format(expression);
                if (markupText && preg_match(expression, markupText, match)) {
                    matches = true;
                    markupText = subString(markupText, match[0].length);
                    break;
                }
            });

            if (!matches) {
                if (shouldFullDebug == true) {
                    debug(markupText);
                    debug(regex);
                }
                this.assertMatchesRegularExpression(
                    expression,
                    to!string(markupText),
                    "Item #%d / regex #%d failed: %s".format(anItemNum,  index, description)
                );

                return false;
            }
        }
        this.assertTrue(true, "%s");

        return true;
    }
    
    // Check the attributes as part of an assertTags() check.
    protected string _assertAttributes(
        Json[string] assertions,
        string mlTextToCheck,
        bool shouldFullDebug = false,
        string[] regex = ""
    ) {
        auto asserts = assertions["attrs"];
        auto explains = assertions["explains"];
        do {
            matches = false;
            j = null;
            foreach (j: assert; asserts) {
                if (preg_match("/^%s/s".format(assert), string, match)) {
                    matches = true;
                    string = subString(string, match[0].length);
                    array_splice(asserts, j, 1);
                    array_splice(explains, j, 1);
                    break;
                }
            }
            if (matches == false) {
                if (shouldFullDebug == true) {
                    debug(string);
                    debug(regex);
                }
                this.assertTrue(false, "Attribute did not match. Was expecting " ~ explains[j]);
            }
            len = count(asserts);
        } while (len > 0);

        return string;
    }
    
    // Normalize a path for comparison.
    protected string _normalizePath(string path) {
        return str_replace("/", DIRECTORY_SEPARATOR, path);
    }
// Dcs:disable

    // Compatibility auto to test if a value is between an acceptable range.
    protected static void assertWithinRange(float expected, float result, float margin, string message = null) {
        auto upper = result + margin;
        auto lower = result - margin;
        assertTrue(expected <= upper && expected >= lower, message);
    }
    
    // Compatibility auto to test if a value is not between an acceptable range.
    protected static void assertNotWithinRange(float expected, float result, float margin, string message = null) {
        auto upper = result + margin;
        auto lower = result - margin;
        assertTrue(expected > upper || expected < lower, message);
    }
    
    // Compatibility auto to test paths.
    protected static auto assertPathEquals(string expected, string result, string message = null) {
        auto expected = str_replace(DIRECTORY_SEPARATOR, "/", expected);
        auto result = str_replace(DIRECTORY_SEPARATOR, "/", result);
        assertEquals(expected, result, message);
    }
    
    // Compatibility auto for skipping.
    protected bool skipUnless(bool condition, string messageToSkip = null) {
        if (!condition) {
            markTestSkipped(messageToSkip);
        }
        return condition;
    }
// Dcs:enable

    // Mock a model, maintain fixtures and table association
    Table|MockObject getMockForModel(string modelAlias, Json[string] methodsToMock = [], Json[string] options = null) {
        auto classname = _getTableclassname(modelAlias, options);
        auto connectionName = classname.defaultConnectionName();
        auto aConnection = ConnectionManager.get(connectionName);

        auto locator = getTableLocator();

        [, baseClass] = pluginSplit(modelAlias);
        options.update(["alias": baseClass, "connection": aConnection]);
        auto updatedOptions = options.updatelocator.configuration.get(modelAlias);
        auto reflection = new DReflectionClass(classname);
         classnameMethods = array_map(function (method) {
            return method.name;
        }, reflection.getMethods());

        auto existingMethods = array_intersect(classnameMethods,  methodsToMock);
        auto nonExistingMethods = array_diff(methodsToMock, existingMethods);
        auto builder = getMockBuilder(classname)
            .setConstructorArgs([options]);

        if (existingMethods || !nonExistingMethods) {
            builder.onlyMethods(existingMethods);
        }
        if (nonExistingMethods) {
            trigger_error("Adding non existent methods to your model " ~
                "via testing will not work in future Unit versions.", ERRORS.USER_DEPRECATED);
            builder.addMethods(nonExistingMethods);
        }
        /** @var \ORM\Table mock */
        mock = builder.getMock();

        if (isoptions.isEmpty("entityClass"]) && mock.getEntityClass() == Entity.classname) {
            string[] someParts = classname.split("\\");
            entityAlias = Inflector.classify(Inflector.underscore(subString(array_pop(someParts), 0, -5)));
            entityClass = array_slice(someParts, 0, -1).join("\\") ~ "\\Entity\\" ~ entityAlias;
            if (class_exists(entityClass)) {
                mock.setEntityClass(entityClass);
            }
        }
        if (stripos(mock.getTable(), "mock") == 0) {
            mock.setTable(Inflector.tableize(baseClass));
        }
        locator.set(baseClass, mock);
        locator.set(modelAlias, mock);

        return mock;
    }
    
    // Gets the class name for the table.
    protected string _getTableclassname(string modelAlias, Json[string] options = null) {
        if (isoptions.isEmpty("classname")) {
            auto classname = Inflector.camelize(modelAlias);
            /** @var class-string<\ORM\Table>|null  classname */
             classname = App.classname(classname, "Model/Table", "Table");
            if (!classname) {
                throw new DMissingTableClassException([aliasName]);
            }
            options.set("classname", classname);
        }
        return options["classname"];
    }
    
    // Set the app namespace
    static string setAppNamespace(string appNamespace = "TestApp") {
        auto previous = configuration.getString("App.namespace");
        Configuration.update("App.namespace", appNamespace);

        return previous;
    }
    
    /**
     * Adds a fixture to this test case.
     *
     * Examples:
     * - core.Tags
     * - app.MyRecords
     * - plugin.MyPluginName.MyModelName
     *
     * Use this method inside your test cases" {@link getFixtures()} method
     * to build up the fixture list.
     * Params:
     * string afixture Fixture

     */
    protected void addFixture(string afixture) {
        this.fixtures ~= fixture;
    }
    
    // Get the fixtures this test should use.
    string[] getFixtures() {
        return _fixtures;
    }
    
    void expectNoticeMessageMatches(string regex, Closure aCallable) {
        expectErrorHandlerMessageMatches(regex, aCallable, ERRORS.USER_NOTICE);
    }
    
    void expectDeprecationMessageMatches(string regex, Closure aCallable) {
        expectErrorHandlerMessageMatches(regex, aCallable, ERRORS.USER_DEPRECATED);
    }
    
    void expectWarningMessageMatches(string regex, Closure aCallable) {
        expectErrorHandlerMessageMatches(regex, aCallable, ERRORS.USER_WARNING);
    }
    
    void expectErrorMessageMatches(string regex, Closure aCallable) {
        expectErrorHandlerMessageMatches(regex, aCallable, ERRORS.ERROR | ERRORS.USER_ERROR);
    }
    
    protected void expectErrorHandlerMessageMatches(string regex, Closure aCallable, int errorLevel) {
        set_error_handler(static auto (int errno, string aerrstr): never {
            throw new DException(errstr, errno);
        }, errorLevel);

        expectException(Exception.classname);
        expectExceptionMessageMatches(regex);
        try {
            aCallable();
        } finally {
            restore_error_handler();
        }
    } 
}
