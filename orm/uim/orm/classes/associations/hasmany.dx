module uim.orm.Association;

import uim.orm;

@safe:
/**
 * Represents an N - 1 relationship where the target side of the relationship
 * will have one or multiple records per each one in the source side.
 *
 * An example of a HasMany association would be Author has many Articles.
 */
class HasMany : Association {
    /**
     * Order in which target records should be returned
     *
     * @var \UIM\Database\IExpression|\Closure|array<\UIM\Database\IExpression|string>|string
     */
    protected IExpression|Closure|string[]|null _sort = null;

    // The type of join to be used when adding the association to a query
    protected string _joinType = SelectQuery.JOIN_TYPE_INNER;

    /**
     * The strategy name to be used to fetch associated records.
     */
    protected string _strategy = self.STRATEGY_SELECT;

    /**
     * Valid strategies for this type of association
     */
    protected string[] _validStrategies = [
        self.STRATEGY_SELECT,
        self.STRATEGY_SUBQUERY,
    ];

    /**
     * Saving strategy that will only append to the links set
     */
    const string SAVE_APPEND = "append";

    /**
     * Saving strategy that will replace the links with the provided set
     */
    const string SAVE_REPLACE = "replace";

    /**
     * Saving strategy to be used by this association
     */
    protected string _saveStrategy = self.SAVE_APPEND;

    /**
     * Returns whether the passed table is the owning side for this
     * association. This means that rows in the "target" table would miss important
     * or required information if the row in "source" did not exist.
     * Params:
     * \UIM\ORM\Table side The potential Table with ownership
     */
    bool isOwningSide(Table side) {
        return side == this.getSource();
    }
    
    /**
     * Sets the strategy that should be used for saving.
     * Params:
     * string astrategy the strategy name to be used
     * @throws \InvalidArgumentException if an invalid strategy name is passed
     */
    void setSaveStrategy(string astrategy) {
        if (!in_array(strategy, [self.SAVE_APPEND, self.SAVE_REPLACE], true)) {
            message = "Invalid save strategy `%s`".format(strategy);
            throw new InvalidArgumentException(message);
        }
       _saveStrategy = strategy;
    }
    
    /**
     * Gets the strategy that should be used for saving.
     */
    string getSaveStrategy() {
        return _saveStrategy;
    }
    
    /**
     * Takes an entity from the source table and looks if there is a field
     * matching the property name for this association. The found entity will be
     * saved on the target table for this association by passing supplied
     * `options`
     * Params:
     * \UIM\Datasource\IEntity entity an entity from the source table
     * @param IData[string] options options to be passed to the save method in the target table
     */
    IEntity|false saveAssociated(IEntity entity, IData[string] options = null) {
        targetEntities = entity.get(this.getProperty());

         isEmpty = in_array(targetEntities, [null, [], "", false], true);
        if (isEmpty) {
            if (
                entity.isNew() ||
                this.getSaveStrategy() != self.SAVE_REPLACE
            ) {
                return entity;
            }
            targetEntities = [];
        }
        if (!is_iterable(targetEntities)) {
            name = this.getProperty();
            message = "Could not save %s, it cannot be traversed".format(name);
            throw new InvalidArgumentException(message);
        }
        string[] foreignKeys = (array)this.getForeignKey();
        foreignKeyReference = array_combine(
            foreignKeys,
            entity.extract((array)this.getBindingKey())
        );

        options["_sourceTable"] = this.getSource();

        if (
           _saveStrategy == self.SAVE_REPLACE &&
            !_unlinkAssociated(foreignKeyReference, entity, this.getTarget(), targetEntities, options)
        ) {
            return false;
        }
        if (!isArray(targetEntities)) {
            targetEntities = iterator_to_array(targetEntities);
        }
        if (!_saveTarget(foreignKeyReference, entity, targetEntities, options)) {
            return false;
        }
        return entity;
    }
    
    /**
     * Persists each of the entities into the target table and creates links between
     * the parent entity and each one of the saved target entities.
     * Params:
     * array foreignKeyReference The foreign key reference defining the link between the
     * target entity, and the parent entity.
     * @param \UIM\Datasource\IEntity parentEntity The source entity containing the target
     * entities to be saved.
     * @param array entities list of entities
     * to persist in target table and to link to the parent entity
     * @param IData[string] options list of options accepted by `Table.save()`.
     */
    protected bool _saveTarget(
        array foreignKeyReference,
        IEntity parentEntity,
        array entities,
        IData[string] options
    ) {
        auto foreignKey = foreignKeyReference.keys;
        auto aTable = this.getTarget();
        auto original = entities;

        foreach (entities as myKey: entity) {
            if (!(cast(IEntity)entity)) {
                break;
            }
            if (!empty(options["atomic"])) {
                entity = clone entity;
            }
            if (foreignKeyReference != entity.extract(foreignKey)) {
                entity.set(foreignKeyReference, ["guard": false]);
            }
            if (aTable.save(entity, options)) {
                entities[myKey] = entity;
                continue;
            }
            if (!empty(options["atomic"])) {
                original[myKey].setErrors(entity.getErrors());
                if (cast(IInvalidProperty)entity) {
                    original[myKey].setFieldsInvalid(entity.getInvalid());
                }
                return false;
            }
        }
        parentEntity.set(this.getProperty(), entities);

        return true;
    }
    
    /**
     * Associates the source entity to each of the target entities provided.
     * When using this method, all entities in `targetEntities` will be appended to
     * the source entity"s property corresponding to this association object.
     *
     * This method does not check link uniqueness.
     * Changes are persisted in the database and also in the source entity.
     *
     * ### Example:
     *
     * ```
     * user = users.get(1);
     * allArticles = articles.find("all").toArray();
     * users.Articles.link(user, allArticles);
     * ```
     *
     * `user.get("articles")` will contain all articles in `allArticles` after linking
     * Params:
     * \UIM\Datasource\IEntity sourceEntity the row belonging to the `source` side
     * of this association
     * @param array targetEntities list of entities belonging to the `target` side
     * of this association
     * @param IData[string] options list of options to be passed to the internal `save` call
     */
    bool link(IEntity sourceEntity, array targetEntities, IData[string] options = null) {
        saveStrategy = this.getSaveStrategy();
        this.setSaveStrategy(self.SAVE_APPEND);
         aProperty = this.getProperty();

        currentEntities = array_unique(
            chain(
                (array)sourceEntity.get(aProperty),
                targetEntities
            )
        );

        sourceEntity.set(aProperty, currentEntities);

        savedEntity = this.getConnection().transactional(fn (): this.saveAssociated(sourceEntity, options));
        ok = (cast(IEntity)savedEntity);

        this.setSaveStrategy(saveStrategy);

        if (ok) {
            sourceEntity.set(aProperty, savedEntity.get(aProperty));
            sourceEntity.setDirty(aProperty, false);
        }
        return ok;
    }
    
    /**
     * Removes all links between the passed source entity and each of the provided
     * target entities. This method assumes that all passed objects are already persisted
     * in the database and that each of them contain a primary key value.
     *
     * ### Options
     *
     * Additionally to the default options accepted by `Table.delete()`, the following
     * keys are supported:
     *
     * - cleanProperty: Whether to remove all the objects in `targetEntities` that
     * are stored in `sourceEntity` (default: true)
     *
     * By default this method will unset each of the entity objects stored inside the
     * source entity.
     *
     * Changes are persisted in the database and also in the source entity.
     *
     * ### Example:
     *
     * ```
     * user = users.get(1);
     * user.articles = [article1, article2, article3, article4];
     * users.save(user, ["Associated": ["Articles"]]);
     * allArticles = [article1, article2, article3];
     * users.Articles.unlink(user, allArticles);
     * ```
     *
     * `article.get("articles")` will contain only `[article4]` after deleting in the database
     * Params:
     * \UIM\Datasource\IEntity sourceEntity an entity persisted in the source table for
     * this association
     * @param array targetEntities list of entities persisted in the target table for
     * this association
     * @param IData[string]|bool options list of options to be passed to the internal `delete` call.
     *  If boolean it will be used a value for "cleanProperty" option.
     * @throws \InvalidArgumentException if non persisted entities are passed or if
     * any of them is lacking a primary key value
     */
    void unlink(IEntity sourceEntity, array targetEntities, array|bool auto options = []) {
        if (isBool(options)) {
            options = [
                "cleanProperty": options,
            ];
        } else {
            options += ["cleanProperty": true];
        }
        if (count(targetEntities) == 0) {
            return;
        }
        foreignKey = (array)this.getForeignKey();
        target = this.getTarget();
        targetPrimaryKey = array_merge((array)target.getPrimaryKey(), foreignKey);
         aProperty = this.getProperty();

        conditions = [
            "OR": (new Collection(targetEntities))
                .map(function (IEntity entity) use (targetPrimaryKey) {
                    /** @psalm-suppress InvalidArgument,UnusedPsalmSuppress */
                    /** @var string[] targetPrimaryKey */
                    return entity.extract(targetPrimaryKey);
                })
                .toList(),
        ];

       _unlink(foreignKey, target, conditions, options);

        result = sourceEntity.get(aProperty);
        if (options["cleanProperty"] && result !isNull) {
            sourceEntity.set(
                 aProperty,
                (new Collection(sourceEntity.get(aProperty)))
                .reject(
                    auto (assoc) use (targetEntities) {
                        return in_array(assoc, targetEntities);
                    }
                )
                .toList()
            );
        }
        sourceEntity.setDirty(aProperty, false);
    }
    
    /**
     * Replaces existing association links between the source entity and the target
     * with the ones passed. This method does a smart cleanup, links that are already
     * persisted and present in `targetEntities` will not be deleted, new links will
     * be created for the passed target entities that are not already in the database
     * and the rest will be removed.
     *
     * For example, if an author has many articles, such as "article1","article 2" and "article 3" and you pass
     * to this method an array containing the entities for articles "article 1" and "article 4",
     * only the link for "article 1" will be kept in database, the links for "article 2" and "article 3" will be
     * deleted and the link for "article 4" will be created.
     *
     * Existing links are not deleted and created again, they are either left untouched
     * or updated.
     *
     * This method does not check link uniqueness.
     *
     * On success, the passed `sourceEntity` will contain `targetEntities` as value
     * in the corresponding property for this association.
     *
     * Additional options for new links to be saved can be passed in the third argument,
     * check `Table.save()` for information on the accepted options.
     *
     * ### Example:
     *
     * ```
     * author.articles = [article1, article2, article3, article4];
     * authors.save(author);
     * articles = [article1, article3];
     * authors.getAssociation("articles").replace(author, articles);
     * ```
     *
     * `author.get("articles")` will contain only `[article1, article3]` at the end
     * Params:
     * \UIM\Datasource\IEntity sourceEntity an entity persisted in the source table for
     * this association
     * @param array targetEntities list of entities from the target table to be linked
     * @param IData[string] options list of options to be passed to the internal `save`/`delete` calls
     * when persisting/updating new links, or deleting existing ones
     * @throws \InvalidArgumentException if non persisted entities are passed or if
     * any of them is lacking a primary key value
         */
    bool replace(IEntity sourceEntity, array targetEntities, IData[string] options = null) {
         aProperty = this.getProperty();
        sourceEntity.set(aProperty, targetEntities);
        saveStrategy = this.getSaveStrategy();
        this.setSaveStrategy(self.SAVE_REPLACE);
        result = this.saveAssociated(sourceEntity, options);
        ok = (cast(IEntity)result);

        if (ok) {
            // phpcs:ignore SlevomatCodingStandard.Variables.UnusedVariable.UnusedVariable
            sourceEntity = result;
        }
        this.setSaveStrategy(saveStrategy);

        return ok;
    }
    
    /**
     * Deletes/sets null the related objects according to the dependency between source and targets
     * and foreign key nullability. Skips deleting records present in remainingEntities
     * Params:
     * array foreignKeyReference The foreign key reference defining the link between the
     * target entity, and the parent entity.
     * @param \UIM\Datasource\IEntity entity the entity which should have its associated entities unassigned
     * @param \UIM\ORM\Table target The associated table
     * @param iterable remainingEntities Entities that should not be deleted
     * @param IData[string] options list of options accepted by `Table.delete()`
     */
    protected bool _unlinkAssociated(
        array foreignKeyReference,
        IEntity entity,
        Table target,
        iterable remainingEntities = [],
        IData[string] options = null
    ): bool {
        primaryKey = (array)target.getPrimaryKey();
        exclusions = new Collection(remainingEntities);
        exclusions = exclusions.map(
            auto (IEntity ent) use (primaryKey) {
                return ent.extract(primaryKey);
            }
        )
        .filter(
            auto (v) {
                return !in_array(null, v, true);
            }
        )
        .toList();

        conditions = foreignKeyReference;

        if (count(exclusions) > 0) {
            conditions = [
                "NOT": [
                    "OR": exclusions,
                ],
                foreignKeyReference,
            ];
        }
        return _unlink(foreignKeyReference.keys, target, conditions, options);
    }
    
    /**
     * Deletes/sets null the related objects matching conditions.
     *
     * The action which is taken depends on the dependency between source and
     * targets and also on foreign key nullability.
     * Params:
     * array foreignKey array of foreign key properties
     * @param \UIM\ORM\Table target The associated table
     * @param array conditions The conditions that specifies what are the objects to be unlinked
     * @param IData[string] options list of options accepted by `Table.delete()`
     */
    protected bool _unlink(array foreignKey, Table target, array conditions = [], IData[string] options = null) {
        mustBeDependent = (!_foreignKeyAcceptsNull(target, foreignKey) || this.getDependent());

        if (mustBeDependent) {
            if (_cascadeCallbacks) {
                conditions = new QueryExpression(conditions);
                conditions.traverse(void (entry) use (target) {
                    if (cast(IField)entry) {
                        field = entry.getFieldNames();
                        if (isString(field)) {
                            entry.setFieldNames(target.aliasField(field));
                        }
                    }
                });
                aQuery = this.find().where(conditions);
                ok = true;
                foreach (aQuery.all() as assoc) {
                    ok = ok && target.delete(assoc, options);
                }
                return ok;
            }
            this.deleteAll(conditions);

            return true;
        }
        updateFields = array_fill_keys(foreignKey, null);
        this.updateAll(updateFields, conditions);

        return true;
    }
    
    /**
     * Checks the nullable flag of the foreign key
     * Params:
     * \UIM\ORM\Table aTable the table containing the foreign key
     * @param array properties the list of fields that compose the foreign key
     */
    protected bool _foreignKeyAcceptsNull(Table aTable, array properties) {
        return !in_array(
            false,
            array_map(
                auto (prop) use (aTable) {
                    return aTable.getSchema().isNullable(prop);
                },
                properties
            )
        );
    }
    
    /**
     * Get the relationship type.
     */
    string type() {
        return self.ONE_TO_MANY;
    }
    
    /**
     * Whether this association can be expressed directly in a query join
     * Params:
     * IData[string] options custom options key that could alter the return value
     */
    bool canBeJoined(IData[string] options = null) {
        return !empty(options["matching"]);
    }
 
    string[] getForeignKey() {
        if (!isSet(_foreignKey)) {
           _foreignKey = _modelKey(this.getSource().getTable());
        }
        return _foreignKey;
    }
    
    /**
     * Sets the sort order in which target records should be returned.
     * Params:
     * \UIM\Database\IExpression|\Closure|array<\UIM\Database\IExpression|string>|string asort A find() compatible order clause
     */
    void setSort(IExpression|Closure|string[] asort) {
       _sort = sort;

        return this;
    }
    
    /**
     * Gets the sort order in which target records should be returned.
     */
    IExpression|Closure|string[]|null getSort() {
        return _sort;
    }
 
    array defaultRowValue(array row, bool joined) {
        sourceAlias = this.getSource().getAlias();
        if (isSet(row[sourceAlias])) {
            row[sourceAlias][this.getProperty()] = joined ? null : [];
        }
        return row;
    }
    
    /**
     * Parse extra options passed in the constructor.
     * Params:
     * IData[string] options original list of options passed in constructor
     */
    protected void _options(IData[string] options = null) {
        if (!empty(options["saveStrategy"])) {
            this.setSaveStrategy(options["saveStrategy"]);
        }
        if (isSet(options["sort"])) {
            this.setSort(options["sort"]);
        }
    }
 
    auto eagerLoader(IData[string] options = null): Closure
    {
        loader = new SelectLoader([
            "alias": this.getAlias(),
            "sourceAlias": this.getSource().getAlias(),
            "targetAlias": this.getTarget().getAlias(),
            "foreignKey": this.getForeignKey(),
            "bindingKey": this.getBindingKey(),
            "strategy": this.getStrategy(),
            "associationType": this.type(),
            "sort": this.getSort(),
            "finder": this.find(...),
        ]);

        return loader.buildEagerLoader(options);
    }
 
    bool cascadeDelete(IEntity entity, IData[string] options = null) {
        helper = new DependentDeleteHelper();

        return helper.cascadeDelete(this, entity, options);
    }
}
