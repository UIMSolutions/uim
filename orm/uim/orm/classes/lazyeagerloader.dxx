module uim.orm;

import DORMcollections\Collection;
import DORMcollections\ICollection;
import DORMdatabases.expressions\TupleComparison;
import DORMdatasources\IEntity;

/**
 * Contains methods that are capable of injecting eagerly loaded associations into
 * entities or lists of entities by using the same syntax as the EagerLoader.
 *
 * @internal
 */
class LazyEagerLoader
{
    /**
     * Loads the specified associations in the passed entity or list of entities
     * by executing extra queries in the database and merging the results in the
     * appropriate properties.
     *
     * The properties for the associations to be loaded will be overwritten on each entity.
     *
     * @param DORMDatasource\IEntity|array<DORMDatasource\IEntity> entities a single entity or list of entities
     * @param array contain A `contain()` compatible array.
     * @see DORMQuery::contain()
     * @param DORMTable source The table to use for fetching the top level entities
     * @return DORMDatasource\IEntity|array<DORMDatasource\IEntity>
     */
    function loadInto(entities, array contain, Table source) {
        returnSingle = false;

        if (cast(IEntity)entities) {
            entities = [entities];
            returnSingle = true;
        }

        entities = new Collection(entities);
        query = _getQuery(entities, contain, source);
        associations = query.getContain().keys;

        entities = _injectResults(entities, query, associations, source);

        return returnSingle ? array_shift(entities) : entities;
    }

    /**
     * Builds a query for loading the passed list of entity objects along with the
     * associations specified in contain.
     *
     * @param DORMcollections.ICollection objects The original entities
     * @param array contain The associations to be loaded
     * @param DORMTable source The table to use for fetching the top level entities
     * @return DORMQuery
     */
    protected function _getQuery(ICollection objects, array contain, Table source): Query
    {
        primaryKeys = source.getPrimaryKeys();
        method = is_string(primaryKeys) ? "get" : "extract";

        keys = objects.map(function (entity) use (primaryKeys, method) {
            return entity.{method}(primaryKeys);
        });

        query = source
            .find()
            .select((array)primaryKeys)
            .where(function (exp, q) use (primaryKeys, keys, source) {
                /**
                 * @var DDBExpression\QueryExpression exp
                 * @var DORMQuery q
                 */
                if ((primaryKeys.isArray && count(primaryKeys) == 1) {
                    primaryKeys = current(primaryKeys);
                }

                if (is_string(primaryKeys)) {
                    return exp.in(source.aliasField(primaryKeys), keys.toList());
                }

                types = array_intersect_key(q.getDefaultTypes(), array_flip(primaryKeys));
                primaryKeys = array_map([source, "aliasField"], primaryKeys);

                return new TupleComparison(primaryKeys, keys.toList(), types, "IN");
            })
            .enableAutoFields()
            .contain(contain);

        foreach (query.getEagerLoader().attachableAssociations(source) as loadable) {
            myConfiguration = loadable.getConfig();
            myconfiguration["includeFields"] = true;
            loadable.configuration.update(myConfiguration);
        }

        return query;
    }

    /**
     * Returns a map of property names where the association results should be injected
     * in the top level entities.
     *
     * @param DORMTable source The table having the top level associations
     * @param array<string> associations The name of the top level associations
     */
    protected string[] _getPropertyMap(Table source, array associations) {
        map = null;
        container = source.associations();
        foreach (associations as assoc) {
            /** @psalm-suppress PossiblyNullReference */
            map[assoc] = container.get(assoc).getProperty();
        }

        return map;
    }

    /**
     * Injects the results of the eager loader query into the original list of
     * entities.
     *
     * @param iterable<DORMDatasource\IEntity> objects The original list of entities
     * @param DORMQuery results The loaded results
     * @param array<string> associations The top level associations that were loaded
     * @param DORMTable source The table where the entities came from
     * @return array<DORMDatasource\IEntity>
     */
    protected function _injectResults(Range objects, results, array associations, Table source) {
        injected = null;
        properties = _getPropertyMap(source, associations);
        primaryKeys = (array)source.getPrimaryKeys();
        results = results
            .all()
            .indexBy(function (e) use (primaryKeys) {
                /** @var DORMdatasources.IEntity e */
                return implode(";", e.extract(primaryKeys));
            })
            .toArray();

        foreach (objects as k: object) {
            key = implode(";", object.extract(primaryKeys));
            if (!isset(results[key])) {
                injected[k] = object;
                continue;
            }

            /** @var DORMdatasources.IEntity loaded */
            loaded = results[key];
            foreach (associations as assoc) {
                property = properties[assoc];
                object.set(property, loaded.get(property), ["useSetters": false]);
                object.setDirty(property, false);
            }
            injected[k] = object;
        }

        return injected;
    }
}
