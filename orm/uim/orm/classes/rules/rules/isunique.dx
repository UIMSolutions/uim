/*********************************************************************************************************
  Copyright: © 2015-2024 Ozan Nurettin Süel (Sicherheitsschmiede)                                        
  License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file.  
  Authors: Ozan Nurettin Süel (Sicherheitsschmiede)                                                      
**********************************************************************************************************/
module uim.orm.rules;

import uim.orm;

@safe:

// Checks that a list of fields from an entity are unique in the table
class DIsUnique {
    /**
     * The list of fields to check
     */
    protected string[] _fields;

    /**
     * The unique check options
     *
     * @var array<string, mixed>
     */
    protected _options = [
        "allowMultipleNulls": false,
    ];

    /**
     * Constructor.
     *
     * ### Options
     *
     * - `allowMultipleNulls` Allows any field to have multiple null values. Defaults to false.
     *
     * @param array<string> fields The list of fields to check uniqueness for
     * @param array<string, mixed> options The options for unique checks.
     */
    this(array fields, IData[string] optionData = null) {
        _fields = fields;
        _options = options + _options;
    }

    /**
     * Performs the uniqueness check
     *
     * @param DORMDatasource\IEntity anEntity The entity from where to extract the fields
     *   where the `repository` key is required.
     * @param array<string, mixed> options Options passed to the check,
     */
    bool __invoke(IEntity anEntity, IData[string] optionData) {
        if (!entity.extract(_fields, true)) {
            return true;
        }

        fields = entity.extract(_fields);
        if (_options["allowMultipleNulls"] && array_filter(fields, "is_null")) {
            return true;
        }

        alias = options["repository"].aliasName();
        conditions = _alias(alias, fields);
        if (entity.isNew() == false) {
            keys = (array)options["repository"].getPrimaryKeys();
            keys = _alias(alias, entity.extract(keys));
            if (Hash::filter(keys)) {
                conditions["NOT"] = keys;
            }
        }

        return !options["repository"].exists(conditions);
    }

    /**
     * Add a model alias to all the keys in a set of conditions.
     *
     * @param string anAliasName The alias to add.
     * @param array conditions The conditions to alias.
     * @return array<string, mixed>
     */
    protected array _alias(string anAliasName, array conditions) {
        aliased = null;
        foreach (conditions as key: value) {
            aliased["alias.key IS"] = value;
        }

        return aliased;
    }
}
