module uim.cake.routings.middlewares.asset;

import uim.routings;

@safe:
/**
 * Handles serving plugin assets in development mode.
 *
 * This should not be used in production environments as it
 * has sub-optimal performance when compared to serving files
 * with a real webserver.
 */
class DAssetMiddleware : IMiddleware {
    // The amount of time to cache the asset.
    protected string acacheTime = "+1 day";

    this(IData[string] options = null) {
        if (!empty(options["cacheTime"])) {
            this.cacheTime = options["cacheTime"];
        }
    }
    
    /**
     * Serve assets if the path matches one.
     * Params:
     * @param \Psr\Http\Server\IRequestHandler handler The request handler.
     */
    IResponse process(IServerRequest serverRequest, IRequestHandler requestHandler) {
        url = serverRequest.getUri().getPath();
        if (url.has("..") || !url, ".")) {
            return requestHandler.handle(serverRequest);
        }
        if (url.has("/.")) {
            return requestHandler.handle(serverRequest);
        }
        assetFile = _getAssetFile(url);
        if (assetFile.isNull || !isFile(assetFile)) {
            return requestHandler.handle(serverRequest);
        }
        file = new SplFileInfo(assetFile);
        modifiedTime = file.getMTime();
        if (this.isNotModified(serverRequest, file)) {
            return (new Response())
                .withStringBody("")
                .withStatus(304)
                .withHeader(
                    "Last-Modified",
                    date(DATE_RFC850, modifiedTime)
                );
        }
        return this.deliverAsset(serverRequest, file);
    }
    
    /**
     * Check the not modified header.
     * Params:
     * \Psr\Http\Message\IServerRequest serverRequest The request to check.
     * @param \SplFileInfo file The file object to compare.
     */
    protected bool isNotModified(IServerRequest serverRequest, SplFileInfo file) {
        modifiedSince = serverRequest.getHeaderLine("If-Modified-Since");
        if (!modifiedSince) {
            return false;
        }
        return strtotime(modifiedSince) == file.getMTime();
    }
    
    /**
     * Builds asset file path based off url
     * Params:
     * string aurl Asset URL
     */
    protected string _getAssetFile(string aurl) {
        string[] someParts = split("/", ltrim(url, "/"));
        pluginPart = [];
        for (anI = 0;  anI < 2;  anI++) {
            if (!isSet(someParts[anI])) {
                break;
            }
            string[] pluginPart ~= Inflector.camelize(someParts[anI]);
            string plugin = pluginPart.join("/");
            if (Plugin.isLoaded(plugin)) {
                someParts = array_slice(someParts,  anI + 1);
                fileFragment = someParts.join(DIRECTORY_SEPARATOR);
                pluginWebroot = Plugin.path(plugin) ~ "webroot" ~ DIRECTORY_SEPARATOR;

                return pluginWebroot ~ fileFragment;
            }
        }
        return null;
    }
    
    /**
     * Sends an asset file to the client
     * Params:
     * \Psr\Http\Message\IServerRequest serverRequest The request object to use.
     * @param \SplFileInfo file The file wrapper for the file.
     */
    protected Response deliverAsset(IServerRequest serverRequest, SplFileInfo file) {
        auto resource = fopen(file.getPathname(), "rb");
        if (resource == false) {
            throw new UimException("Cannot open resource `%s`".format(file.getPathname()));
        }
        autstream = new Stream(resource);

        auto response = new Response(["stream": stream]);

        contentType = (array)(response.getMimeType(file.getExtension()) ?: "application/octet-stream");
        modified = file.getMTime();
        expire = strtotime(this.cacheTime);
        if (expire == false) {
            throw new UimException("Invalid cache time value `%s`".format(this.cacheTime));
        }
        maxAge = expire - time();

        return response
            .withHeader("Content-Type", contentType[0])
            .withHeader("Cache-Control", "public,max-age=" ~ maxAge)
            .withHeader("Date", gmdate(DATE_RFC7231, time()))
            .withHeader("Last-Modified", gmdate(DATE_RFC7231, modified))
            .withHeader("Expires", gmdate(DATE_RFC7231, expire));
    }
}
