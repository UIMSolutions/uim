/****************************************************************************************************************
* Copyright: © 2017-2024 Ozan Nurettin Süel (aka UIManufaktur)                                                  *
* License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file.         *
* Authors: Ozan Nurettin Süel (aka UIManufaktur)                                                                *
*****************************************************************************************************************/
module uim.routings.plugins.collection;

import uim.routings;

@safe:

/**
 * Plugin Collection
 *
 * Holds onto plugin objects loaded into an application, and
 * provides methods for iterating, and finding plugins based
 * on criteria.
 *
 * This class : the Iterator interface to allow plugins
 * to be iterated, handling the situation where a plugin`s hook
 * method (usually bootstrap) loads another plugin during iteration.
 *
 * While its implementation supported nested iteration it does not
 * support using `continue` or `break` inside loops.
 *
 * @template-implements \Iterator<string, \UIM\Core\IPlugin>
 */
class DPluginCollection : DCollection!DPlugin /* : Iterator, Countable */ { // TODO
    // Plugin list
    protected IPlugin[string] _plugins;

    // Names of plugins
    protected string[] _names;

    // Iterator position stack.
    protected int[] _positions;

    // Loop depth
    protected int _loopDepth = -1;

    /* this(IPlugin[] plugins = null) {
        plugins.each!(plugin => add(plugin));
        // TODO _loadFileConfigEngine();
    } */

    /**
     * Add plugins from config array.
     * Params:
     * Json data Configuration array. For e.g.:
     * ```
     * [
     *     "Company/TestPluginThree",
     *     "TestPlugin": ["onlyDebug": true, "onlyCli": true],
     *     "Nope": ["optional": true],
     *     "Named": ["routes": false, "bootstrap": false],
     * ]
     * ```
     */
    // TODO 
    /* void addFromConfig(Json data = null) {
        auto debugData = configuration.get("debug");
        bool cli = UIM_SAPI == "cli";

        foreach (name, options; data) {
            Json options = options.dup;
            Json onlyDebug = options.get("onlyDebug", null);
            Json onlyCli = options.get("onlyCli", null);
            Json optional = options.get("optional", null);

            if ((onlyDebug && !debugData) || (onlyCli && !cli)) {
                continue;
            }

            try {
                auto plugin = _create(name, options);
                _add(plugin);
            } catch (MissingPluginException anException) {
                if (!optional) {
                    throw anException;
                }
            }
        }
    } */

    /**
     * Load the path information stored in vendor/UIM-plugins.d
     *
     * This file is generated by the UIM/plugin-installer package and used
     * to locate plugins on the filesystem as applications can use `extra.plugin-paths`
     * in their composer.json file to move plugin outside of vendor/
     */
    // TODO
    /*  protected void loadFileConfigEngine() {
        if (Configure.check("plugins")) {
            return;
        }
        
        auto vendorFile = dirname(__DIR__, 2) ~ DIRECTORY_SEPARATOR ~ "UIM-plugins.d";
        if (!isFile(vendorFile)) {
            vendorFile = dirname(__DIR__, 4) ~ DIRECTORY_SEPARATOR ~ "UIM-plugins.d";
            if (!isFile(vendorFile)) {
            Configuration.setPath(["plugins": Json.emptyArray]);

                return;
            }
        }
        
        auto data = requirevendorFile;
        configuration.set(data);
    }
*/
    /**
     * Locate a plugin path by looking at configuration data.
     *
     * This will use the `plugins` Configure key, and fallback to enumerating `App.path("plugins")`
     *
     * This method is not part of the official API as plugins with
     * no plugin class DAre being phased out.
     */
    string findPath(string pluginName) {
        // Ensure plugin config is loaded each time. This is necessary primarily
        // for testing because the Configuration.clear() call in TestCase.tearDown()
        // wipes out all configuration including plugin paths config.
        // TODO _loadFileConfigEngine();

        // TODO
        /* auto somePath = configuration.get("plugins." ~ pluginName);
        if (somePath) {
            return somePath;
        } 
        
        auto pluginPath = pluginName.replace("/", DIRECTORY_SEPARATOR);
        auto somePaths = App.path("plugins");
        foreach (path; somePaths) {
            if (isDir(path ~ pluginPath)) {
                return path ~ pluginPath ~ DIRECTORY_SEPARATOR;
            }
        }
        throw new DMissingPluginException(["plugin": pluginName]);
        */
        return null; // TODO 
    }

    // Add a plugin to the collection. Plugins will be keyed by their names.
    void add(IPlugin plugin) {
        if (plugin is null) {
            return;
        }

        _plugins[plugin.name] = plugin;
        _names = _plugins.keys;
    }

    // Remove a plugin from the collection if it exists.
    bool removeKey(string pluginName) {
        _plugins.removeKey(pluginName);
        _names = _plugins.keys;
    }

    // Remove all plugins from the collection
    void clear() {
        _plugins = null;
        _names = null;
        _positions = null;
        _loopDepth = -1;
    }

    /**
     * Get the a plugin by name.
     *
     * If a plugin isn`t already loaded it will be autoloaded on first access
     * and that plugins loaded this way may miss some hook methods.
     */
    IPlugin get(string pluginName) {
        if (_plugins.hasKey(pluginName)) {
            return _plugins[pluginName];
        }

        // TODO 
        /*
        IPlugin plugin = _create(pluginName);
        _add(plugin);

        return plugin; */
        return null;
    }

    /**
     * Create a plugin instance from a name/classname and configuration.
     * Params:
     * data - Configuration options for the plugin.
     */
    // TODO
    /* IPlugin create(string pluginName, Json data = null) {
        if (pluginName.isEmpty) {
            throw new UIMException("Cannot create a plugin with empty name");
        }
        if (pluginName.contains("\\")) {
            if (!class_hasKey(pluginName)) {
                throw new DInvalidArgumentException("Class `%s` does not exist.".format(pluginName));
            }
            return new pluginName(data);
        }
        data += ["name": pluginName];
        
        string namespace = pluginName.replace("/", "\\");
        string classname = namespace ~ "\\" ~ "Plugin";
        // Check for [Vendor/]Foo/Plugin class
        if (!class_hasKey(classname)) {
            pos = indexOf(pluginName, "/");
            classname = pos == false 
                ? namespace ~ "\\" ~ pluginName ~ "Plugin"
                : namespace ~ "\\" ~ subString(pluginName, pos + 1) ~ "Plugin";

            // Check for [Vendor/]Foo/FooPlugin
            if (!class_hasKey(classname)) {
                string classname = BasePlugin.classname;
                if (data("path").isEmpty) {
                    data("path", _findPath(pluginName));
                }
            }
        }
        return new classname(data);
    }
    */

    /**
     * Implementation of Countable.
     *
     * Get the number of plugins in the collection.
     */
    size_t count() {
        return _plugins.length;
    }

    // Part of Iterator Interface
    void next() {
        _positions[_loopDepth]++;
    }

    // Part of Iterator Interface
    string key() {
        return _names[_positions[_loopDepth]];
    }

    // Part of Iterator Interface
    IPlugin currentValue() {
        auto position = _positions[_loopDepth];
        auto pluginName = _names[position];

        return _plugins[pluginName];
    }

    // Part of Iterator Interface
    void rewind() {
        _positions ~= 0;
        _loopDepth += 1;
    }

    // Part of Iterator Interface
    bool valid() {
        auto result = _names.hasKey(_positions[_loopDepth]);
        if (!result) {
            // TODO _positions.pop();
            _loopDepth -= 1;
        }
        return result;
    }

    /**
     * Filter the plugins to those with the named hook enabled.
     * Params:
     * string ahook The hook to filter plugins by
     */
    // TODO
    /*  Generator<\UIM\Core\IPlugin> with (string myhook) {
        if (!isIn(hook, IPlugin:
                 : VALID_HOOKS, true)) {
            throw new DInvalidArgumentException(
                "The `%s` hook is not a known plugin hook.".format(hook));
        }
        this
            .filter!(plugin => plugin.isEnabled(hook))
            .each!(pligin => yield plugin);
    }*/
}
